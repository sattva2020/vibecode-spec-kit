import * as fs from "fs";import * as path from "path";import { ProjectInfo } from "../types/ProjectTypes";export class ProjectAnalyzer {async analyzeProject(projectPath: string): Promise<ProjectInfo> {const projectName = path.basename(projectPath);const files = await this.scanDirectory(projectPath);const dependencies = await this.extractDependencies(projectPath);return {name: projectName,path: projectPath,type: this.detectProjectType(files),files: files,dependencies: dependencies,lastModified: await this.getLastModified(projectPath)};}private async scanDirectory(dirPath: string): Promise<string[]> {const files: string[] = [];try {const items = await fs.promises.readdir(dirPath, { withFileTypes: true });for (const item of items) {const fullPath = path.join(dirPath, item.name);if (item.isDirectory() && !this.isIgnoredDirectory(item.name)) {const subFiles = await this.scanDirectory(fullPath);files.push(...subFiles);} else if (item.isFile() && this.isRelevantFile(item.name)) {files.push(fullPath);}}} catch (error) {console.error("Error scanning directory:", error);}return files;}private isIgnoredDirectory(dirName: string): boolean {const ignoredDirs = ["node_modules", ".git", "dist", "build", ".next"];return ignoredDirs.includes(dirName);}private isRelevantFile(fileName: string): boolean {const relevantExtensions = [".ts", ".tsx", ".js", ".jsx", ".json", ".md", ".yml", ".yaml"];return relevantExtensions.some(ext => fileName.endsWith(ext));}private detectProjectType(files: string[]): string {if (files.some(f => f.endsWith("package.json"))) {return "nodejs";}if (files.some(f => f.endsWith("Cargo.toml"))) {return "rust";}if (files.some(f => f.endsWith("requirements.txt"))) {return "python";}return "unknown";}private async extractDependencies(projectPath: string): Promise<string[]> {const packageJsonPath = path.join(projectPath, "package.json");try {const packageJson = JSON.parse(await fs.promises.readFile(packageJsonPath, "utf-8"));const dependencies = Object.keys(packageJson.dependencies || {});const devDependencies = Object.keys(packageJson.devDependencies || {});return [...dependencies, ...devDependencies];} catch (error) {return [];}}private async getLastModified(projectPath: string): Promise<Date> {try {const stats = await fs.promises.stat(projectPath);return stats.mtime;} catch (error) {return new Date();}}}
