import { C4Element, C4Relationship } from "../types/C4Types";export interface HighlightingState {highlightedElements: C4Element[];highlightedRelationships: C4Relationship[];highlightType: "hover" | "select" | "dependency" | "context";}export interface InteractionPattern {clickCount: number;hoverTime: number;selectionHistory: string[];navigationPattern: string[];}export class InteractiveHighlighting {private currentHighlight: HighlightingState = {highlightedElements: [], highlightedRelationships: [], highlightType: "hover"};private interactionHistory: InteractionPattern = {clickCount: 0, hoverTime: 0, selectionHistory: [], navigationPattern: []};highlightRelated(selected: C4Element, allElements: C4Element[], allRelationships: C4Relationship[]): HighlightingState {const relatedElements = this.findRelatedElements(selected, allElements, allRelationships);const relatedRelationships = this.findRelatedRelationships(selected, allRelationships);this.currentHighlight = {highlightedElements: relatedElements,highlightedRelationships: relatedRelationships,highlightType: "dependency"};return this.currentHighlight;}showDependencies(element: C4Element, allRelationships: C4Relationship[]): C4Relationship[] {const dependencies = allRelationships.filter(rel => rel.from === element.id || rel.to === element.id);this.currentHighlight.highlightedRelationships = dependencies;this.currentHighlight.highlightType = "dependency";return dependencies;}trackUserInteraction(element: C4Element, action: string): InteractionPattern {this.interactionHistory.clickCount++;if (action === "select") {this.interactionHistory.selectionHistory.push(element.id);}this.interactionHistory.navigationPattern.push(`${action}:${element.id}`);return this.interactionHistory;}optimizeHighlighting(pattern: InteractionPattern): any {const frequentlySelected = this.getFrequentlySelected(pattern.selectionHistory);const commonNavigation = this.getCommonNavigation(pattern.navigationPattern);return {preloadElements: frequentlySelected,defaultHighlight: commonNavigation,optimizationLevel: this.calculateOptimizationLevel(pattern)};}private findRelatedElements(element: C4Element, allElements: C4Element[], allRelationships: C4Relationship[]): C4Element[] {const relatedIds = allRelationships.filter(rel => rel.from === element.id || rel.to === element.id).map(rel => rel.from === element.id ? rel.to : rel.from);return allElements.filter(el => relatedIds.includes(el.id));}private findRelatedRelationships(element: C4Element, allRelationships: C4Relationship[]): C4Relationship[] {return allRelationships.filter(rel => rel.from === element.id || rel.to === element.id);}private getFrequentlySelected(selectionHistory: string[]): string[] {const counts = selectionHistory.reduce((acc, id) => {acc[id] = (acc[id] || 0) + 1;return acc;}, {} as Record<string, number>);return Object.entries(counts).filter(([_, count]) => count > 2).map(([id, _]) => id);}private getCommonNavigation(navigationPattern: string[]): string {const patterns = navigationPattern.slice(-10);const commonActions = patterns.filter(action => action.startsWith("hover:")).length;const selectActions = patterns.filter(action => action.startsWith("select:")).length;if (commonActions > selectActions) {return "hover";} else {return "select";}}private calculateOptimizationLevel(pattern: InteractionPattern): "low" | "medium" | "high" {if (pattern.clickCount > 20) {return "high";} else if (pattern.clickCount > 10) {return "medium";} else {return "low";}}}
