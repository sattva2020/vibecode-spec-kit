import { C4Diagram, C4Element, C4Relationship } from "../types/C4Types";export interface ComplexityLevel {level: "simple" | "medium" | "complex";threshold: number;}export interface DisclosureLevel {level: "overview" | "detailed" | "expert";elements: C4Element[];relationships: C4Relationship[];}export interface FilterSet {showContainers: boolean;showComponents: boolean;showRelationships: boolean;showTechnologies: boolean;complexityThreshold: ComplexityLevel;}export class ProgressiveDisclosureEngine {private complexityThresholds = {simple: 10,medium: 25,complex: 50};analyzeComplexity(diagram: C4Diagram): ComplexityLevel {const totalElements = diagram.elements.length + diagram.relationships.length;if (totalElements <= this.complexityThresholds.simple) {return { level: "simple", threshold: this.complexityThresholds.simple };} else if (totalElements <= this.complexityThresholds.medium) {return { level: "medium", threshold: this.complexityThresholds.medium };} else {return { level: "complex", threshold: this.complexityThresholds.complex };}}determineDisclosureLevel(user: any, complexity: ComplexityLevel): DisclosureLevel {if (complexity.level === "simple") {return this.createOverviewLevel(user);} else if (complexity.level === "medium") {return this.createDetailedLevel(user);} else {return this.createExpertLevel(user);}}applyFilters(content: C4Diagram, filters: FilterSet): C4Diagram {let filteredElements = content.elements;let filteredRelationships = content.relationships;if (!filters.showContainers) {filteredElements = filteredElements.filter(el => el.type !== "Container");}if (!filters.showComponents) {filteredElements = filteredElements.filter(el => el.type !== "Component");}if (!filters.showRelationships) {filteredRelationships = [];}if (!filters.showTechnologies) {filteredElements = filteredElements.map(el => ({ ...el, technology: undefined }));}return {id: content.id,type: content.type,title: content.title,description: content.description,elements: filteredElements,relationships: filteredRelationships};}optimizeForPerformance(content: C4Diagram): C4Diagram {if (content.elements.length > 30) {const importantElements = content.elements.filter(el => this.isImportantElement(el));return {id: content.id,type: content.type,title: content.title,description: content.description,elements: importantElements.slice(0, 20),relationships: content.relationships.slice(0, 15)};}return content;}private createOverviewLevel(user: any): DisclosureLevel {return {level: "overview",elements: [],relationships: []};}private createDetailedLevel(user: any): DisclosureLevel {return {level: "detailed",elements: [],relationships: []};}private createExpertLevel(user: any): DisclosureLevel {return {level: "expert",elements: [],relationships: []};}private isImportantElement(element: C4Element): boolean {const importantTypes = ["System", "Container", "Database"];const importantKeywords = ["core", "main", "primary", "api", "auth"];return importantTypes.includes(element.type) ||importantKeywords.some(keyword => element.name.toLowerCase().includes(keyword));}}
