import { ProgressiveDisclosureEngine, FilterSet, DisclosureLevel } from "./ProgressiveDisclosureEngine";import { ContextualZoomSystem, ZoomLevel, ContextualInformation } from "./ContextualZoomSystem";import { InteractiveHighlighting, HighlightingState } from "./InteractiveHighlighting";import { MermaidRenderer } from "../generators/MermaidRenderer";import { C4Diagram } from "../types/C4Types";export class ProgressiveDisclosureUI {private disclosureEngine: ProgressiveDisclosureEngine;private zoomSystem: ContextualZoomSystem;private highlighting: InteractiveHighlighting;private mermaidRenderer: MermaidRenderer;private currentDiagram: C4Diagram | null = null;private currentFilters: FilterSet;private currentZoom: ZoomLevel;constructor() {this.disclosureEngine = new ProgressiveDisclosureEngine();this.zoomSystem = new ContextualZoomSystem();this.highlighting = new InteractiveHighlighting();this.mermaidRenderer = new MermaidRenderer();this.currentFilters = this.getDefaultFilters();this.currentZoom = {level: "overview", scale: 1, focusElements: [], contextElements: []};}initializeDiagram(diagram: C4Diagram): void {console.log("üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Progressive Disclosure UI –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã:", diagram.title);this.currentDiagram = diagram;const complexity = this.disclosureEngine.analyzeComplexity(diagram);console.log("üìä –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", complexity.level);const disclosureLevel = this.disclosureEngine.determineDisclosureLevel({}, complexity);console.log("üîç –£—Ä–æ–≤–µ–Ω—å —Ä–∞—Å–∫—Ä—ã—Ç–∏—è:", disclosureLevel.level);this.renderDiagram();}applyFilters(filters: FilterSet): void {if (!this.currentDiagram) return;this.currentFilters = filters;const filteredDiagram = this.disclosureEngine.applyFilters(this.currentDiagram, filters);const optimizedDiagram = this.disclosureEngine.optimizeForPerformance(filteredDiagram);console.log("üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã:", {showContainers: filters.showContainers, showComponents: filters.showComponents});this.renderDiagram(optimizedDiagram);}zoomToElement(elementId: string): void {if (!this.currentDiagram) return;const focusArea = this.zoomSystem.detectUserFocus(this.currentDiagram.elements);const newZoom = this.zoomSystem.calculateOptimalZoom(focusArea, this.currentDiagram);console.log("üîç Zoom –∫ —ç–ª–µ–º–µ–Ω—Ç—É:", elementId, "–£—Ä–æ–≤–µ–Ω—å:", newZoom.level);this.currentZoom = newZoom;this.renderDiagram();}highlightElement(elementId: string): void {if (!this.currentDiagram) return;const element = this.currentDiagram.elements.find(el => el.id === elementId);if (element) {const highlightState = this.highlighting.highlightRelated(element, this.currentDiagram.elements, this.currentDiagram.relationships);console.log("‚ú® –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞:", element.name, "–°–≤—è–∑–∞–Ω–Ω—ã—Ö:", highlightState.highlightedElements.length);this.renderDiagram();}}private renderDiagram(diagram?: C4Diagram): void {const diagramToRender = diagram || this.currentDiagram;if (!diagramToRender) return;let mermaidCode = "";if (diagramToRender.type === "system-context") {mermaidCode = this.mermaidRenderer.renderSystemContext(diagramToRender);} else if (diagramToRender.type === "container") {mermaidCode = this.mermaidRenderer.renderContainerDiagram(diagramToRender);} else if (diagramToRender.type === "component") {mermaidCode = this.mermaidRenderer.renderComponentDiagram(diagramToRender);} else {mermaidCode = this.mermaidRenderer.renderC4Diagram(diagramToRender);}console.log("üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ Mermaid –¥–∏–∞–≥—Ä–∞–º–º—ã:");console.log(mermaidCode);this.saveDiagram(diagramToRender.id, mermaidCode);}private saveDiagram(diagramId: string, mermaidCode: string): void {const fs = require("fs");const path = require("path");const outputDir = path.join(__dirname, "../../docs/generated/c4-diagrams");if (!fs.existsSync(outputDir)) {fs.mkdirSync(outputDir, { recursive: true });}const filePath = path.join(outputDir, `${diagramId}.mmd`);fs.writeFileSync(filePath, mermaidCode);console.log("üíæ –î–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:", filePath);}private getDefaultFilters(): FilterSet {return {showContainers: true,showComponents: true,showRelationships: true,showTechnologies: true,complexityThreshold: { level: "medium", threshold: 25 }};}}
