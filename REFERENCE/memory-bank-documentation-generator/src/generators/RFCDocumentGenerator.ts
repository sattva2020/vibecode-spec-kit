import { RFCDocument, RFCSection } from "../types/RFCTypes";import { ProjectInfo } from "../types/ProjectTypes";export class RFCDocumentGenerator {buildArchitectureDecisions(project: ProjectInfo): RFCDocument {const sections: RFCSection[] = [{id: "abstract",title: "Abstract",content: "Данный RFC документирует ключевые архитектурные решения для Memory Bank системы.",type: "text"},{id: "decisions",title: "Architecture Decisions",content: "1. **Event-Driven Architecture** - для интеграции с внешними системами\\n2. **Progressive Disclosure Interface** - для C4 диаграмм\\n3. **Modular Template System** - для RFC документов\\n4. **Hybrid Adaptive Interface** - для UI/UX",type: "text"}];return {id: "architecture-decisions",title: "Memory Bank Architecture Decisions",abstract: "Архитектурные решения для Memory Bank системы",status: "active",sections: sections,references: ["C4 Model", "RFC 2119"],lastUpdated: new Date()};}buildTechnicalStandards(project: ProjectInfo): RFCDocument {const sections: RFCSection[] = [{id: "standards",title: "Technical Standards",content: "1. **TypeScript** - основной язык разработки\\n2. **Mermaid** - для диаграмм\\n3. **Markdown** - для документации\\n4. **Event-Driven** - архитектурный паттерн",type: "text"}];return {id: "technical-standards",title: "Memory Bank Technical Standards",abstract: "Технические стандарты и принципы",status: "active",sections: sections,references: ["TypeScript Handbook", "Mermaid Documentation"],lastUpdated: new Date()};}buildSecurityGuidelines(project: ProjectInfo): RFCDocument {const sections: RFCSection[] = [{id: "guidelines",title: "Security Guidelines",content: "1. **Sandboxed Execution** - через Cursor Hooks\\n2. **Input Validation** - валидация всех входных данных\\n3. **Access Control** - контроль доступа к документации\\n4. **Audit Logging** - логирование всех операций",type: "text"}];return {id: "security-guidelines",title: "Memory Bank Security Guidelines",abstract: "Руководящие принципы безопасности",status: "active",sections: sections,references: ["OWASP Guidelines", "Security Best Practices"],lastUpdated: new Date()};}generateMarkdown(rfc: RFCDocument): string {let markdown = `# ${rfc.title}\\n\\n**Status:** ${rfc.status}\\n**Last Updated:** ${rfc.lastUpdated.toISOString()}\\n\\n## Abstract\\n\\n${rfc.abstract}\\n\\n`;for (const section of rfc.sections) {markdown += `## ${section.title}\\n\\n${section.content}\\n\\n`;}if (rfc.references.length > 0) {markdown += `## References\\n\\n`;for (const ref of rfc.references) {markdown += `- ${ref}\\n`;}}return markdown;}}
