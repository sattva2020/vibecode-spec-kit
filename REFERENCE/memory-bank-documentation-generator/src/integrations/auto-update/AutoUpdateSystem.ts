import * as chokidar from "chokidar";
import { ProjectInfo } from "../../types/ProjectTypes";
import { RFCDocument } from "../../types/RFCTypes";

export interface UpdateTrigger {
    id: string;
    name: string;
    type: "file-change" | "time-based" | "manual" | "git-event";
    conditions: UpdateCondition[];
    actions: UpdateAction[];
    enabled: boolean;
    interval?: number; // –¥–ª—è time-based —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
}

export interface UpdateCondition {
    field: string;
    operator: "equals" | "contains" | "matches" | "greater" | "less";
    value: any;
}

export interface UpdateAction {
    type: "regenerate-docs" | "update-diagrams" | "sync-git" | "notify" | "backup";
    parameters: any;
    priority: number;
}

export interface UpdateContext {
    project: ProjectInfo;
    changedFiles: string[];
    timestamp: Date;
    user: string;
    mode: string;
}

export interface UpdateResult {
    triggerId: string;
    success: boolean;
    message: string;
    actions: UpdateActionResult[];
    duration: number;
    timestamp: Date;
}

export interface UpdateActionResult {
    actionType: string;
    success: boolean;
    message: string;
    data?: any;
}

export class AutoUpdateSystem {
    private watcher: chokidar.FSWatcher | null = null;
    private triggers: Map<string, UpdateTrigger> = new Map();
    private updateHistory: UpdateResult[] = [];
    private isRunning: boolean = false;
    private projectPath: string = "";

    constructor() {
        this.initializeDefaultTriggers();
    }

    startWatching(projectPath: string): void {
        console.log("üëÅÔ∏è –ó–∞–ø—É—Å–∫ Auto-Update System –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:", projectPath);
        
        this.projectPath = projectPath;
        this.isRunning = true;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ watcher –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤
        this.watcher = chokidar.watch(projectPath, {
            ignored: /(^|[\/\\])\../, // –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
            persistent: true,
            ignoreInitial: true,
            depth: 10
        });

        this.watcher.on('change', (path) => this.handleFileChange(path));
        this.watcher.on('add', (path) => this.handleFileAdd(path));
        this.watcher.on('unlink', (path) => this.handleFileDelete(path));

        // –ó–∞–ø—É—Å–∫ time-based —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        this.startTimeBasedTriggers();

        console.log("‚úÖ Auto-Update System –∑–∞–ø—É—â–µ–Ω");
    }

    stopWatching(): void {
        console.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Auto-Update System");
        
        if (this.watcher) {
            this.watcher.close();
            this.watcher = null;
        }

        this.isRunning = false;
        console.log("‚úÖ Auto-Update System –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }

    private handleFileChange(path: string): void {
        console.log("üìù –§–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω:", path);
        this.executeTriggers("file-change", { changedFiles: [path] });
    }

    private handleFileAdd(path: string): void {
        console.log("‚ûï –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω:", path);
        this.executeTriggers("file-change", { changedFiles: [path] });
    }

    private handleFileDelete(path: string): void {
        console.log("üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω:", path);
        this.executeTriggers("file-change", { changedFiles: [path] });
    }

    private startTimeBasedTriggers(): void {
        for (const trigger of this.triggers.values()) {
            if (trigger.type === "time-based" && trigger.enabled && trigger.interval) {
                setInterval(() => {
                    this.executeTriggers("time-based", {});
                }, trigger.interval);
                
                console.log("‚è∞ Time-based —Ç—Ä–∏–≥–≥–µ—Ä –∑–∞–ø—É—â–µ–Ω:", trigger.name);
            }
        }
    }

    private async executeTriggers(type: string, context: any): Promise<void> {
        const applicableTriggers = this.getApplicableTriggers(type, context);
        
        for (const trigger of applicableTriggers) {
            await this.executeTrigger(trigger, context);
        }
    }

    private getApplicableTriggers(type: string, context: any): UpdateTrigger[] {
        const applicableTriggers: UpdateTrigger[] = [];

        for (const trigger of this.triggers.values()) {
            if (!trigger.enabled || trigger.type !== type) continue;

            if (this.evaluateTriggerConditions(trigger, context)) {
                applicableTriggers.push(trigger);
            }
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        return applicableTriggers.sort((a, b) => {
            const aPriority = Math.max(...a.actions.map(action => action.priority));
            const bPriority = Math.max(...b.actions.map(action => action.priority));
            return bPriority - aPriority;
        });
    }

    private evaluateTriggerConditions(trigger: UpdateTrigger, context: any): boolean {
        for (const condition of trigger.conditions) {
            if (!this.evaluateCondition(condition, context)) {
                return false;
            }
        }
        return true;
    }

    private evaluateCondition(condition: UpdateCondition, context: any): boolean {
        const fieldValue = this.getFieldValue(context, condition.field);
        
        switch (condition.operator) {
            case "equals":
                return fieldValue === condition.value;
            case "contains":
                return String(fieldValue).includes(String(condition.value));
            case "matches":
                return new RegExp(condition.value).test(String(fieldValue));
            case "greater":
                return Number(fieldValue) > Number(condition.value);
            case "less":
                return Number(fieldValue) < Number(condition.value);
            default:
                return false;
        }
    }

    private getFieldValue(context: any, field: string): any {
        const fieldMap: { [key: string]: any } = {
            "file-path": context.changedFiles?.[0] || "",
            "file-extension": context.changedFiles?.[0]?.split('.').pop() || "",
            "timestamp": context.timestamp || new Date(),
            "user": context.user || "system"
        };
        return fieldMap[field];
    }

    private async executeTrigger(trigger: UpdateTrigger, context: any): Promise<void> {
        const startTime = Date.now();
        
        try {
            console.log("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Auto-Update —Ç—Ä–∏–≥–≥–µ—Ä–∞:", trigger.name);
            
            const actions: UpdateActionResult[] = [];
            
            for (const action of trigger.actions) {
                const actionResult = await this.executeAction(action, context);
                actions.push(actionResult);
            }

            const result: UpdateResult = {
                triggerId: trigger.id,
                success: actions.every(a => a.success),
                message: `Trigger ${trigger.name} executed successfully`,
                actions: actions,
                duration: Date.now() - startTime,
                timestamp: new Date()
            };

            this.updateHistory.push(result);
            console.log("‚úÖ Auto-Update —Ç—Ä–∏–≥–≥–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω:", trigger.name, `(${result.duration}ms)`);

        } catch (error) {
            const result: UpdateResult = {
                triggerId: trigger.id,
                success: false,
                message: `Trigger ${trigger.name} execution failed: ${error}`,
                actions: [{
                    actionType: "error",
                    success: false,
                    message: String(error)
                }],
                duration: Date.now() - startTime,
                timestamp: new Date()
            };

            this.updateHistory.push(result);
            console.error("‚ùå Auto-Update —Ç—Ä–∏–≥–≥–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:", trigger.name, error);
        }
    }

    private async executeAction(action: UpdateAction, context: any): Promise<UpdateActionResult> {
        switch (action.type) {
            case "regenerate-docs":
                return this.executeRegenerateDocsAction(action, context);
            case "update-diagrams":
                return this.executeUpdateDiagramsAction(action, context);
            case "sync-git":
                return this.executeSyncGitAction(action, context);
            case "notify":
                return this.executeNotifyAction(action, context);
            case "backup":
                return this.executeBackupAction(action, context);
            default:
                return {
                    actionType: action.type,
                    success: false,
                    message: `Unknown action type: ${action.type}`
                };
        }
    }

    private async executeRegenerateDocsAction(action: UpdateAction, context: any): Promise<UpdateActionResult> {
        console.log("üìù –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏");
        
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            await new Promise(resolve => setTimeout(resolve, 1000)); // –°–∏–º—É–ª—è—Ü–∏—è
            
            return {
                actionType: "regenerate-docs",
                success: true,
                message: "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞",
                data: { 
                    documentsGenerated: 3,
                    timestamp: new Date()
                }
            };
        } catch (error) {
            return {
                actionType: "regenerate-docs",
                success: false,
                message: `–û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: ${error}`
            };
        }
    }

    private async executeUpdateDiagramsAction(action: UpdateAction, context: any): Promise<UpdateActionResult> {
        console.log("üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º");
        
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º –¥–∏–∞–≥—Ä–∞–º–º
            await new Promise(resolve => setTimeout(resolve, 500)); // –°–∏–º—É–ª—è—Ü–∏—è
            
            return {
                actionType: "update-diagrams",
                success: true,
                message: "–î–∏–∞–≥—Ä–∞–º–º—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                data: { 
                    diagramsUpdated: 2,
                    timestamp: new Date()
                }
            };
        } catch (error) {
            return {
                actionType: "update-diagrams",
                success: false,
                message: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º: ${error}`
            };
        }
    }

    private async executeSyncGitAction(action: UpdateAction, context: any): Promise<UpdateActionResult> {
        console.log("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Git");
        
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Git
            await new Promise(resolve => setTimeout(resolve, 200)); // –°–∏–º—É–ª—è—Ü–∏—è
            
            return {
                actionType: "sync-git",
                success: true,
                message: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Git –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                data: { 
                    commitHash: "abc123",
                    timestamp: new Date()
                }
            };
        } catch (error) {
            return {
                actionType: "sync-git",
                success: false,
                message: `–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Git: ${error}`
            };
        }
    }

    private async executeNotifyAction(action: UpdateAction, context: any): Promise<UpdateActionResult> {
        console.log("üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
        
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await new Promise(resolve => setTimeout(resolve, 100)); // –°–∏–º—É–ª—è—Ü–∏—è
            
            return {
                actionType: "notify",
                success: true,
                message: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                data: { 
                    notificationSent: true,
                    timestamp: new Date()
                }
            };
        } catch (error) {
            return {
                actionType: "notify",
                success: false,
                message: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error}`
            };
        }
    }

    private async executeBackupAction(action: UpdateAction, context: any): Promise<UpdateActionResult> {
        console.log("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏");
        
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            await new Promise(resolve => setTimeout(resolve, 300)); // –°–∏–º—É–ª—è—Ü–∏—è
            
            return {
                actionType: "backup",
                success: true,
                message: "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞",
                data: { 
                    backupCreated: true,
                    timestamp: new Date()
                }
            };
        } catch (error) {
            return {
                actionType: "backup",
                success: false,
                message: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${error}`
            };
        }
    }

    private initializeDefaultTriggers(): void {
        console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö Auto-Update —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤");

        // –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è TypeScript —Ñ–∞–π–ª–æ–≤
        this.registerTrigger({
            id: "typescript-file-change",
            name: "TypeScript File Change",
            type: "file-change",
            conditions: [
                {
                    field: "file-extension",
                    operator: "equals",
                    value: "ts"
                }
            ],
            actions: [
                {
                    type: "regenerate-docs",
                    parameters: { templates: ["api", "architecture"] },
                    priority: 80
                }
            ],
            enabled: true
        });

        // –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è RFC —Ñ–∞–π–ª–æ–≤
        this.registerTrigger({
            id: "rfc-file-change",
            name: "RFC File Change",
            type: "file-change",
            conditions: [
                {
                    field: "file-path",
                    operator: "contains",
                    value: "rfc"
                }
            ],
            actions: [
                {
                    type: "update-diagrams",
                    parameters: { includeRelated: true },
                    priority: 90
                },
                {
                    type: "backup",
                    parameters: { includeMetadata: true },
                    priority: 70
                }
            ],
            enabled: true
        });

        // –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.registerTrigger({
            id: "periodic-update",
            name: "Periodic Update",
            type: "time-based",
            conditions: [],
            actions: [
                {
                    type: "regenerate-docs",
                    parameters: { forceUpdate: true },
                    priority: 60
                },
                {
                    type: "sync-git",
                    parameters: { autoCommit: false },
                    priority: 50
                }
            ],
            enabled: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω
            interval: 300000 // 5 –º–∏–Ω—É—Ç
        });

        console.log("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Auto-Update —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
    }

    registerTrigger(trigger: UpdateTrigger): void {
        console.log("üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Auto-Update —Ç—Ä–∏–≥–≥–µ—Ä–∞:", trigger.name);
        this.triggers.set(trigger.id, trigger);
    }

    getUpdateStatistics(): any {
        const totalTriggers = this.triggers.size;
        const enabledTriggers = Array.from(this.triggers.values()).filter(t => t.enabled).length;
        const totalUpdates = this.updateHistory.length;
        const successfulUpdates = this.updateHistory.filter(u => u.success).length;
        const averageDuration = this.updateHistory.reduce((sum, u) => sum + u.duration, 0) / totalUpdates;

        return {
            totalTriggers,
            enabledTriggers,
            totalUpdates,
            successfulUpdates,
            successRate: totalUpdates > 0 ? (successfulUpdates / totalUpdates) * 100 : 0,
            averageDuration: Math.round(averageDuration),
            isRunning: this.isRunning,
            projectPath: this.projectPath
        };
    }

    getUpdateHistory(): UpdateResult[] {
        return [...this.updateHistory];
    }
}
