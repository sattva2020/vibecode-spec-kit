import { ProjectInfo } from "../../types/ProjectTypes";
import { RFCDocument } from "../../types/RFCTypes";

export interface TeamRule {
    id: string;
    name: string;
    description: string;
    category: "coding-standards" | "documentation" | "architecture" | "security" | "process";
    scope: "global" | "project" | "file-type" | "component";
    conditions: RuleCondition[];
    actions: RuleAction[];
    enabled: boolean;
    priority: number;
    createdAt: Date;
    updatedAt: Date;
    author: string;
}

export interface RuleCondition {
    field: string;
    operator: "equals" | "contains" | "matches" | "exists" | "greater" | "less";
    value: any;
    description: string;
}

export interface RuleAction {
    type: "enforce" | "suggest" | "warn" | "block" | "auto-fix";
    message: string;
    parameters: any;
    severity: "low" | "medium" | "high" | "critical";
}

export interface RuleExecutionContext {
    project: ProjectInfo;
    filePath: string;
    content: string;
    user: string;
    mode: string;
    timestamp: Date;
}

export interface RuleExecutionResult {
    ruleId: string;
    ruleName: string;
    triggered: boolean;
    actions: RuleActionResult[];
    message: string;
    timestamp: Date;
}

export interface RuleActionResult {
    actionType: string;
    success: boolean;
    message: string;
    severity: string;
    data?: any;
}

export class TeamRulesIntegration {
    private rules: Map<string, TeamRule> = new Map();
    private executionHistory: RuleExecutionResult[] = [];

    constructor() {
        this.initializeDefaultRules();
    }

    registerRule(rule: TeamRule): void {
        console.log("üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Team Rule:", rule.name);
        rule.updatedAt = new Date();
        this.rules.set(rule.id, rule);
    }

    executeRules(context: RuleExecutionContext): Promise<RuleExecutionResult[]> {
        console.log("‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Team Rules –¥–ª—è —Ñ–∞–π–ª–∞:", context.filePath);
        
        const applicableRules = this.getApplicableRules(context);
        const results: Promise<RuleExecutionResult>[] = [];

        for (const rule of applicableRules) {
            results.push(this.executeRule(rule, context));
        }

        return Promise.all(results);
    }

    private getApplicableRules(context: RuleExecutionContext): TeamRule[] {
        const applicableRules: TeamRule[] = [];

        for (const rule of this.rules.values()) {
            if (!rule.enabled) continue;

            if (this.evaluateRuleConditions(rule, context)) {
                applicableRules.push(rule);
            }
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        return applicableRules.sort((a, b) => b.priority - a.priority);
    }

    private evaluateRuleConditions(rule: TeamRule, context: RuleExecutionContext): boolean {
        for (const condition of rule.conditions) {
            if (!this.evaluateCondition(condition, context)) {
                return false;
            }
        }
        return true;
    }

    private evaluateCondition(condition: RuleCondition, context: RuleExecutionContext): boolean {
        const fieldValue = this.getFieldValue(context, condition.field);
        
        switch (condition.operator) {
            case "equals":
                return fieldValue === condition.value;
            case "contains":
                return String(fieldValue).includes(String(condition.value));
            case "matches":
                return new RegExp(condition.value).test(String(fieldValue));
            case "exists":
                return fieldValue !== undefined && fieldValue !== null && fieldValue !== "";
            case "greater":
                return Number(fieldValue) > Number(condition.value);
            case "less":
                return Number(fieldValue) < Number(condition.value);
            default:
                return false;
        }
    }

    private getFieldValue(context: RuleExecutionContext, field: string): any {
        const fieldMap: { [key: string]: any } = {
            "file-path": context.filePath,
            "file-extension": context.filePath.split('.').pop(),
            "content": context.content,
            "content-length": context.content.length,
            "project-type": context.project.type,
            "project-name": context.project.name,
            "user": context.user,
            "mode": context.mode,
            "timestamp": context.timestamp
        };
        return fieldMap[field];
    }

    private async executeRule(rule: TeamRule, context: RuleExecutionContext): Promise<RuleExecutionResult> {
        console.log("üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Team Rule:", rule.name);
        
        const actions: RuleActionResult[] = [];
        let triggered = true;

        try {
            for (const action of rule.actions) {
                const actionResult = await this.executeAction(action, context);
                actions.push(actionResult);
                
                // –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –±–ª–æ–∫–∏—Ä—É—é—â–µ–µ –∏ –Ω–µ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–∞–≤–∏–ª–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–º
                if (action.type === "block" && !actionResult.success) {
                    triggered = false;
                    break;
                }
            }

            const result: RuleExecutionResult = {
                ruleId: rule.id,
                ruleName: rule.name,
                triggered: triggered,
                actions: actions,
                message: triggered ? `Rule ${rule.name} executed successfully` : `Rule ${rule.name} blocked execution`,
                timestamp: new Date()
            };

            this.executionHistory.push(result);
            console.log("‚úÖ Team Rule –≤—ã–ø–æ–ª–Ω–µ–Ω:", rule.name);

            return result;

        } catch (error) {
            const result: RuleExecutionResult = {
                ruleId: rule.id,
                ruleName: rule.name,
                triggered: false,
                actions: [{
                    actionType: "error",
                    success: false,
                    message: `Rule execution failed: ${error}`,
                    severity: "critical"
                }],
                message: `Rule ${rule.name} execution failed`,
                timestamp: new Date()
            };

            this.executionHistory.push(result);
            console.error("‚ùå Team Rule –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:", rule.name, error);

            return result;
        }
    }

    private async executeAction(action: RuleAction, context: RuleExecutionContext): Promise<RuleActionResult> {
        switch (action.type) {
            case "enforce":
                return this.executeEnforceAction(action, context);
            case "suggest":
                return this.executeSuggestAction(action, context);
            case "warn":
                return this.executeWarnAction(action, context);
            case "block":
                return this.executeBlockAction(action, context);
            case "auto-fix":
                return this.executeAutoFixAction(action, context);
            default:
                return {
                    actionType: action.type,
                    success: false,
                    message: `Unknown action type: ${action.type}`,
                    severity: "medium"
                };
        }
    }

    private async executeEnforceAction(action: RuleAction, context: RuleExecutionContext): Promise<RuleActionResult> {
        console.log("üîí –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞:", action.message);
        
        return {
            actionType: "enforce",
            success: true,
            message: action.message,
            severity: action.severity,
            data: { enforced: true, timestamp: new Date() }
        };
    }

    private async executeSuggestAction(action: RuleAction, context: RuleExecutionContext): Promise<RuleActionResult> {
        console.log("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:", action.message);
        
        return {
            actionType: "suggest",
            success: true,
            message: action.message,
            severity: action.severity,
            data: { suggested: true, timestamp: new Date() }
        };
    }

    private async executeWarnAction(action: RuleAction, context: RuleExecutionContext): Promise<RuleActionResult> {
        console.log("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:", action.message);
        
        return {
            actionType: "warn",
            success: true,
            message: action.message,
            severity: action.severity,
            data: { warning: true, timestamp: new Date() }
        };
    }

    private async executeBlockAction(action: RuleAction, context: RuleExecutionContext): Promise<RuleActionResult> {
        console.log("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞:", action.message);
        
        return {
            actionType: "block",
            success: true,
            message: action.message,
            severity: action.severity,
            data: { blocked: true, timestamp: new Date() }
        };
    }

    private async executeAutoFixAction(action: RuleAction, context: RuleExecutionContext): Promise<RuleActionResult> {
        console.log("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", action.message);
        
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        return {
            actionType: "auto-fix",
            success: true,
            message: action.message,
            severity: action.severity,
            data: { autoFixed: true, timestamp: new Date() }
        };
    }

    private initializeDefaultRules(): void {
        console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö Team Rules");

        // –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è TypeScript —Ñ–∞–π–ª–æ–≤
        this.registerRule({
            id: "typescript-coding-standards",
            name: "TypeScript Coding Standards",
            description: "–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è TypeScript —Ñ–∞–π–ª–æ–≤",
            category: "coding-standards",
            scope: "file-type",
            conditions: [
                {
                    field: "file-extension",
                    operator: "equals",
                    value: "ts",
                    description: "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å TypeScript"
                }
            ],
            actions: [
                {
                    type: "enforce",
                    message: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–æ–≥—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é TypeScript",
                    parameters: {},
                    severity: "high"
                },
                {
                    type: "suggest",
                    message: "–î–æ–±–∞–≤—å—Ç–µ JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤",
                    parameters: {},
                    severity: "medium"
                }
            ],
            enabled: true,
            priority: 100,
            createdAt: new Date(),
            updatedAt: new Date(),
            author: "Memory Bank System"
        });

        // –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è RFC –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        this.registerRule({
            id: "rfc-documentation-standards",
            name: "RFC Documentation Standards",
            description: "–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è RFC —Ñ–∞–π–ª–æ–≤",
            category: "documentation",
            scope: "file-type",
            conditions: [
                {
                    field: "file-path",
                    operator: "contains",
                    value: "rfc",
                    description: "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å RFC –¥–æ–∫—É–º–µ–Ω—Ç–æ–º"
                }
            ],
            actions: [
                {
                    type: "enforce",
                    message: "RFC –¥–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å Abstract, Context, Decision, Consequences",
                    parameters: {},
                    severity: "critical"
                },
                {
                    type: "suggest",
                    message: "–î–æ–±–∞–≤—å—Ç–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π",
                    parameters: {},
                    severity: "medium"
                }
            ],
            enabled: true,
            priority: 90,
            createdAt: new Date(),
            updatedAt: new Date(),
            author: "Memory Bank System"
        });

        // –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        this.registerRule({
            id: "architecture-consistency",
            name: "Architecture Consistency",
            description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π",
            category: "architecture",
            scope: "component",
            conditions: [
                {
                    field: "file-path",
                    operator: "contains",
                    value: "architecture",
                    description: "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º"
                }
            ],
            actions: [
                {
                    type: "warn",
                    message: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –ø—Ä–æ–µ–∫—Ç–∞",
                    parameters: {},
                    severity: "medium"
                },
                {
                    type: "suggest",
                    message: "–û–±–Ω–æ–≤–∏—Ç–µ C4 –¥–∏–∞–≥—Ä–∞–º–º—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
                    parameters: {},
                    severity: "low"
                }
            ],
            enabled: true,
            priority: 80,
            createdAt: new Date(),
            updatedAt: new Date(),
            author: "Memory Bank System"
        });

        // –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        this.registerRule({
            id: "security-guidelines",
            name: "Security Guidelines",
            description: "–†—É–∫–æ–≤–æ–¥—è—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            category: "security",
            scope: "global",
            conditions: [
                {
                    field: "content",
                    operator: "contains",
                    value: "password",
                    description: "–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π"
                }
            ],
            actions: [
                {
                    type: "warn",
                    message: "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ",
                    parameters: {},
                    severity: "high"
                },
                {
                    type: "suggest",
                    message: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                    parameters: {},
                    severity: "medium"
                }
            ],
            enabled: true,
            priority: 95,
            createdAt: new Date(),
            updatedAt: new Date(),
            author: "Memory Bank System"
        });

        // –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è Memory Bank workflow
        this.registerRule({
            id: "memory-bank-workflow",
            name: "Memory Bank Workflow",
            description: "–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è Memory Bank workflow",
            category: "process",
            scope: "project",
            conditions: [
                {
                    field: "project-name",
                    operator: "contains",
                    value: "memory-bank",
                    description: "–ü—Ä–æ–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Memory Bank"
                }
            ],
            actions: [
                {
                    type: "enforce",
                    message: "–°–ª–µ–¥—É–π—Ç–µ VAN ‚Üí PLAN ‚Üí CREATIVE ‚Üí IMPLEMENT ‚Üí REFLECT ‚Üí ARCHIVE workflow",
                    parameters: {},
                    severity: "high"
                },
                {
                    type: "suggest",
                    message: "–û–±–Ω–æ–≤–∏—Ç–µ activeContext.md –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞",
                    parameters: {},
                    severity: "medium"
                }
            ],
            enabled: true,
            priority: 85,
            createdAt: new Date(),
            updatedAt: new Date(),
            author: "Memory Bank System"
        });

        console.log("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Team Rules –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
    }

    getRuleStatistics(): any {
        const totalRules = this.rules.size;
        const enabledRules = Array.from(this.rules.values()).filter(r => r.enabled).length;
        const totalExecutions = this.executionHistory.length;
        const triggeredRules = this.executionHistory.filter(r => r.triggered).length;
        
        const categoryStats: { [key: string]: number } = {};
        for (const rule of this.rules.values()) {
            categoryStats[rule.category] = (categoryStats[rule.category] || 0) + 1;
        }

        return {
            totalRules,
            enabledRules,
            totalExecutions,
            triggeredRules,
            triggerRate: totalExecutions > 0 ? (triggeredRules / totalExecutions) * 100 : 0,
            categoryStats,
            lastExecution: this.executionHistory.length > 0 ? this.executionHistory[this.executionHistory.length - 1].timestamp : null
        };
    }

    getExecutionHistory(): RuleExecutionResult[] {
        return [...this.executionHistory];
    }
}
