import { TemplateDefinition, TemplateVariable } from "../engine/TemplateEngine";
import { RFCDocument } from "../../types/RFCTypes";

export interface ValidationResult {
    isValid: boolean;
    errors: ValidationError[];
    warnings: ValidationWarning[];
    score: number;
}

export interface ValidationError {
    type: "critical" | "warning" | "info";
    message: string;
    field?: string;
    suggestion?: string;
}

export interface ValidationWarning {
    message: string;
    field?: string;
    suggestion?: string;
}

export interface ValidationRule {
    id: string;
    name: string;
    description: string;
    validate: (template: TemplateDefinition, data: any) => ValidationError[];
}

export class TemplateValidator {
    private validationRules: ValidationRule[] = [];

    constructor() {
        this.initializeDefaultRules();
    }

    validateTemplate(template: TemplateDefinition, data: any): ValidationResult {
        console.log("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞:", template.metadata.name);
        
        const errors: ValidationError[] = [];
        const warnings: ValidationWarning[] = [];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        const variableErrors = this.validateVariables(template, data);
        errors.push(...variableErrors);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const contentErrors = this.validateContent(template, data);
        errors.push(...contentErrors);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª–∞–º–∏
        for (const rule of this.validationRules) {
            try {
                const ruleErrors = rule.validate(template, data);
                errors.push(...ruleErrors);
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", rule.name, error);
            }
        }
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        const generatedWarnings = this.generateWarnings(template, data, errors);
        warnings.push(...generatedWarnings);
        
        // –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏
        const score = this.calculateScore(errors, warnings);
        
        const result: ValidationResult = {
            isValid: errors.filter(e => e.type === "critical").length === 0,
            errors: errors,
            warnings: warnings,
            score: score
        };
        
        console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", {
            isValid: result.isValid,
            errors: errors.length,
            warnings: warnings.length,
            score: score
        });
        
        return result;
    }

    validateDocument(document: RFCDocument): ValidationResult {
        console.log("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è RFC –¥–æ–∫—É–º–µ–Ω—Ç–∞:", document.title);
        
        const errors: ValidationError[] = [];
        const warnings: ValidationWarning[] = [];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if (!document.title || document.title.trim().length === 0) {
            errors.push({
                type: "critical",
                message: "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
                field: "title"
            });
        }
        
        if (!document.abstract || document.abstract.trim().length === 0) {
            errors.push({
                type: "critical",
                message: "–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π",
                field: "abstract"
            });
        }
        
        if (!document.sections || document.sections.length === 0) {
            errors.push({
                type: "critical",
                message: "–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å–µ–∫—Ü–∏—é",
                field: "sections"
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ü–∏–π
        for (let i = 0; i < document.sections.length; i++) {
            const section = document.sections[i];
            
            if (!section.title || section.title.trim().length === 0) {
                errors.push({
                    type: "critical",
                    message: `–°–µ–∫—Ü–∏—è ${i + 1} –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫`,
                    field: `sections[${i}].title`
                });
            }
            
            if (!section.content || section.content.trim().length === 0) {
                warnings.push({
                    message: `–°–µ–∫—Ü–∏—è "${section.title}" –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞`,
                    field: `sections[${i}].content`,
                    suggestion: "–î–æ–±–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤ —Å–µ–∫—Ü–∏—é"
                });
            }
            
            if (section.content && section.content.length > 5000) {
                warnings.push({
                    message: `–°–µ–∫—Ü–∏—è "${section.title}" —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (${section.content.length} —Å–∏–º–≤–æ–ª–æ–≤)`,
                    field: `sections[${i}].content`,
                    suggestion: "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ –ø–æ–¥—Å–µ–∫—Ü–∏–∏"
                });
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫
        if (document.references && document.references.length > 0) {
            for (let i = 0; i < document.references.length; i++) {
                const reference = document.references[i];
                if (!reference || reference.trim().length === 0) {
                    errors.push({
                        type: "warning",
                        message: `–°—Å—ã–ª–∫–∞ ${i + 1} –ø—É—Å—Ç–∞`,
                        field: `references[${i}]`
                    });
                }
            }
        }
        
        const score = this.calculateScore(errors, warnings);
        
        return {
            isValid: errors.filter(e => e.type === "critical").length === 0,
            errors: errors,
            warnings: warnings,
            score: score
        };
    }

    private validateVariables(template: TemplateDefinition, data: any): ValidationError[] {
        const errors: ValidationError[] = [];
        
        for (const variable of template.variables) {
            if (variable.required && !data.hasOwnProperty(variable.name)) {
                errors.push({
                    type: "critical",
                    message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è "${variable.name}" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`,
                    field: variable.name,
                    suggestion: `–î–æ–±–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: ${variable.description}`
                });
            }
            
            if (data.hasOwnProperty(variable.name)) {
                const value = data[variable.name];
                const typeError = this.validateVariableType(variable, value);
                if (typeError) {
                    errors.push(typeError);
                }
            }
        }
        
        return errors;
    }

    private validateVariableType(variable: TemplateVariable, value: any): ValidationError | null {
        switch (variable.type) {
            case "string":
                if (typeof value !== "string") {
                    return {
                        type: "critical",
                        message: `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è "${variable.name}" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π`,
                        field: variable.name
                    };
                }
                break;
                
            case "number":
                if (typeof value !== "number") {
                    return {
                        type: "critical",
                        message: `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è "${variable.name}" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º`,
                        field: variable.name
                    };
                }
                break;
                
            case "boolean":
                if (typeof value !== "boolean") {
                    return {
                        type: "critical",
                        message: `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è "${variable.name}" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º`,
                        field: variable.name
                    };
                }
                break;
                
            case "array":
                if (!Array.isArray(value)) {
                    return {
                        type: "critical",
                        message: `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è "${variable.name}" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º`,
                        field: variable.name
                    };
                }
                break;
                
            case "object":
                if (typeof value !== "object" || Array.isArray(value)) {
                    return {
                        type: "critical",
                        message: `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è "${variable.name}" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º`,
                        field: variable.name
                    };
                }
                break;
        }
        
        return null;
    }

    private validateContent(template: TemplateDefinition, data: any): ValidationError[] {
        const errors: ValidationError[] = [];
        
        try {
            const Mustache = require("mustache");
            const renderedContent = Mustache.render(template.content, data);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
            for (const requiredSection of template.validation.requiredSections) {
                if (!renderedContent.includes(requiredSection)) {
                    errors.push({
                        type: "critical",
                        message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è: "${requiredSection}"`,
                        suggestion: "–î–æ–±–∞–≤—å—Ç–µ —Å–µ–∫—Ü–∏—é –≤ —à–∞–±–ª–æ–Ω"
                    });
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if (renderedContent.length > template.validation.maxLength) {
                errors.push({
                    type: "warning",
                    message: `–ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (${renderedContent.length} —Å–∏–º–≤–æ–ª–æ–≤)`,
                    suggestion: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: ${template.validation.maxLength} —Å–∏–º–≤–æ–ª–æ–≤`
                });
            }
            
        } catch (error) {
            errors.push({
                type: "critical",
                message: `–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞: ${error}`,
                suggestion: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —à–∞–±–ª–æ–Ω–∞"
            });
        }
        
        return errors;
    }

    private generateWarnings(template: TemplateDefinition, data: any, errors: ValidationError[]): ValidationWarning[] {
        const warnings: ValidationWarning[] = [];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        const usedVariables = this.extractUsedVariables(template.content);
        const unusedVariables = template.variables.filter(v => !usedVariables.includes(v.name));
        
        for (const variable of unusedVariables) {
            warnings.push({
                message: `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è "${variable.name}" –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —à–∞–±–ª–æ–Ω–µ`,
                field: variable.name,
                suggestion: "–£–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –µ—ë –≤ —à–∞–±–ª–æ–Ω"
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –¥–∞–Ω–Ω—ã—Ö
        for (const variableName of usedVariables) {
            if (!template.variables.find(v => v.name === variableName) && !data.hasOwnProperty(variableName)) {
                warnings.push({
                    message: `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è "${variableName}" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —à–∞–±–ª–æ–Ω–µ, –Ω–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞`,
                    field: variableName,
                    suggestion: "–î–æ–±–∞–≤—å—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã–µ"
                });
            }
        }
        
        return warnings;
    }

    private extractUsedVariables(content: string): string[] {
        const variableRegex = /\{\{([^}]+)\}\}/g;
        const variables: string[] = [];
        let match;
        
        while ((match = variableRegex.exec(content)) !== null) {
            const variableName = match[1].trim();
            if (!variables.includes(variableName)) {
                variables.push(variableName);
            }
        }
        
        return variables;
    }

    private calculateScore(errors: ValidationError[], warnings: ValidationWarning[]): number {
        const criticalErrors = errors.filter(e => e.type === "critical").length;
        const warningErrors = errors.filter(e => e.type === "warning").length;
        const infoErrors = errors.filter(e => e.type === "info").length;
        
        let score = 100;
        score -= criticalErrors * 20; // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Å–∏–ª—å–Ω–æ —Å–Ω–∏–∂–∞—é—Ç –æ—Ü–µ–Ω–∫—É
        score -= warningErrors * 10;  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —É–º–µ—Ä–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞—é—Ç –æ—Ü–µ–Ω–∫—É
        score -= infoErrors * 5;      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–µ–≥–∫–∞ —Å–Ω–∏–∂–∞—é—Ç –æ—Ü–µ–Ω–∫—É
        score -= warnings.length * 2; // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Å–ª–µ–≥–∫–∞ —Å–Ω–∏–∂–∞—é—Ç –æ—Ü–µ–Ω–∫—É
        
        return Math.max(0, Math.min(100, score));
    }

    private initializeDefaultRules(): void {
        console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
        
        // –ü—Ä–∞–≤–∏–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        this.validationRules.push({
            id: "title-quality",
            name: "Title Quality Check",
            description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤",
            validate: (template, data) => {
                const errors: ValidationError[] = [];
                
                if (data.title) {
                    if (data.title.length < 5) {
                        errors.push({
                            type: "warning",
                            message: "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π",
                            field: "title",
                            suggestion: "–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"
                        });
                    }
                    
                    if (data.title.length > 100) {
                        errors.push({
                            type: "warning",
                            message: "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π",
                            field: "title",
                            suggestion: "–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤"
                        });
                    }
                }
                
                return errors;
            }
        });
        
        // –ü—Ä–∞–≤–∏–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        this.validationRules.push({
            id: "abstract-quality",
            name: "Abstract Quality Check",
            description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏",
            validate: (template, data) => {
                const errors: ValidationError[] = [];
                
                if (data.abstract) {
                    if (data.abstract.length < 50) {
                        errors.push({
                            type: "warning",
                            message: "–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è",
                            field: "abstract",
                            suggestion: "–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é"
                        });
                    }
                    
                    if (data.abstract.length > 500) {
                        errors.push({
                            type: "warning",
                            message: "–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è",
                            field: "abstract",
                            suggestion: "–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤"
                        });
                    }
                }
                
                return errors;
            }
        });
        
        // –ü—Ä–∞–≤–∏–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã
        this.validationRules.push({
            id: "date-validation",
            name: "Date Validation",
            description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã",
            validate: (template, data) => {
                const errors: ValidationError[] = [];
                
                if (data.date) {
                    const date = new Date(data.date);
                    if (isNaN(date.getTime())) {
                        errors.push({
                            type: "critical",
                            message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã",
                            field: "date",
                            suggestion: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD"
                        });
                    }
                }
                
                return errors;
            }
        });
        
        console.log("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
    }
}
