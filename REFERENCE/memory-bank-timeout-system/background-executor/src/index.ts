/**
 * Background Executor - –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
 */

import { BackgroundExecutor } from './core/BackgroundExecutor';
import { ProcessInfo, ProcessStatus, ProcessPriority } from './types/ExecutorTypes';

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ —Ç–∏–ø–æ–≤
export { BackgroundExecutor, ProcessInfo, ProcessStatus, ProcessPriority };

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ BackgroundExecutor
const globalBackgroundExecutor = new BackgroundExecutor({
  maxConcurrentProcesses: 5,
  forceKillTimeout: 10000,
  autoRecovery: true,
  maxRecoveryAttempts: 3,
  verboseLogging: true
});

/**
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Background Executor
 */
export const backgroundExecutor = {
  /**
   * –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ–Ω–µ
   */
  async executeInBackground(
    command: string,
    args: string[] = [],
    options?: any
  ): Promise<string> {
    return await globalBackgroundExecutor.executeInBackground(command, args, options);
  },

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  async stopProcess(processId: string): Promise<boolean> {
    return await globalBackgroundExecutor.stopProcess(processId);
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
   */
  getActiveProcesses(): ProcessInfo[] {
    return globalBackgroundExecutor.getActiveProcesses();
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
   */
  getQueueSize(): number {
    return globalBackgroundExecutor.getQueueSize();
  },

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  configure(config: any): void {
    globalBackgroundExecutor.configure(config);
  }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
console.log('üöÄ Background Executor initialized successfully');
console.log('üìä Active processes:', backgroundExecutor.getActiveProcesses().length);

export default backgroundExecutor;
