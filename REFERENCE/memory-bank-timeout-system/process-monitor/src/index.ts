/**
 * Process Monitor - –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
 */

import { ProcessMonitor } from './core/ProcessMonitor';
import { ProcessInfo, ProcessStatus } from './types/ProcessTypes';

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ —Ç–∏–ø–æ–≤
export { ProcessMonitor, ProcessInfo, ProcessStatus };

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ ProcessMonitor
const globalProcessMonitor = new ProcessMonitor({
  updateInterval: 1000,
  historyRetentionTime: 3600000,
  verboseLogging: true,
  maxHistorySize: 1000
});

/**
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Process Monitor
 */
export const processMonitor = {
  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  addProcess(processInfo: ProcessInfo): void {
    globalProcessMonitor.addProcess(processInfo);
  },

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  removeProcess(processId: string): void {
    globalProcessMonitor.removeProcess(processId);
  },

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
   */
  updateProcess(processId: string, updates: Partial<ProcessInfo>): void {
    globalProcessMonitor.updateProcess(processId, updates);
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
   */
  getProcess(processId: string): ProcessInfo | undefined {
    return globalProcessMonitor.getProcess(processId);
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
   */
  getActiveProcesses(): ProcessInfo[] {
    return globalProcessMonitor.getActiveProcesses();
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
   */
  getProcessHistory(): ProcessInfo[] {
    return globalProcessMonitor.getProcessHistory();
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  getStats() {
    return globalProcessMonitor.getStats();
  },

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  configure(config: any): void {
    globalProcessMonitor.configure(config);
  }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
console.log('üöÄ Process Monitor initialized successfully');
console.log('üìä Active processes:', processMonitor.getActiveProcesses().length);

export default processMonitor;
