/**
 * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Memory Bank Timeout System
 */

const { memoryBankTimeout } = require('./dist/index.js');

async function testFunctionality() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Memory Bank Timeout System...\n');

  try {
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    console.log('üìä –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã');
    const stats = memoryBankTimeout.getStats();
    console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:', JSON.stringify(stats, null, 2));
    console.log('‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω\n');

    // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ checkpoint'–∞
    console.log('üìã –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ checkpoint\'–∞');
    const checkpointId = memoryBankTimeout.createCheckpoint('–¢–µ—Å—Ç–æ–≤—ã–π checkpoint');
    console.log(`Checkpoint —Å–æ–∑–¥–∞–Ω —Å ID: ${checkpointId}`);
    console.log('‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω\n');

    // –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
    console.log('üîÑ –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞');
    memoryBankTimeout.switchMode('PLAN');
    console.log('–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ PLAN');
    console.log('‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω\n');

    // –¢–µ—Å—Ç 4: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    console.log('‚ö° –¢–µ—Å—Ç 4: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º');
    const result = await memoryBankTimeout.executeCommand('echo', ['Hello Memory Bank Timeout System!'], 5000);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', {
      success: result.success,
      stdout: result.stdout.trim(),
      executionTime: result.executionTime
    });
    console.log('‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω\n');

    // –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ checkpoint'–æ–≤
    console.log('üìã –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ checkpoint\'–æ–≤');
    const checkpoints = memoryBankTimeout.getCheckpoints();
    console.log(`–ù–∞–π–¥–µ–Ω–æ checkpoint'–æ–≤: ${checkpoints.length}`);
    if (checkpoints.length > 0) {
      console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–π checkpoint:', {
        id: checkpoints[checkpoints.length - 1].id,
        description: checkpoints[checkpoints.length - 1].description,
        timestamp: checkpoints[checkpoints.length - 1].timestamp
      });
    }
    console.log('‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω\n');

    // –¢–µ—Å—Ç 6: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä –¢–µ—Å—Ç 6: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
    const finalStats = memoryBankTimeout.getStats();
    console.log('–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', JSON.stringify(finalStats, null, 2));
    console.log('‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω\n');

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!');
    console.log('üöÄ Memory Bank Timeout System —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testFunctionality();
