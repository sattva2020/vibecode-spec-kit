#!/usr/bin/env python3
"""
Knowledge Management CLI
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ-–±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –¥–ª—è n8n —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import argparse
import sys
import json
from pathlib import Path
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent.parent))

from src.core.config import Settings
from src.knowledge.lightrag_service import LightRAGService
from src.knowledge.knowledge_ingestion_pipeline import KnowledgeIngestionPipeline


class KnowledgeManagerCLI:
    """CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏—è–º–∏"""

    def __init__(self):
        self.settings = Settings()
        self.lightrag_service = None
        self.pipeline = None

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.lightrag_service = LightRAGService(self.settings)
        self.pipeline = KnowledgeIngestionPipeline(self.settings, self.lightrag_service)

        await self.lightrag_service.initialize()
        await self.pipeline.initialize()

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        if self.pipeline:
            await self.pipeline.close()
        if self.lightrag_service:
            await self.lightrag_service.close()

    async def init_knowledge_base(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        print("üß† Initializing knowledge base...")

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LightRAG
            await self.lightrag_service.initialize_knowledge_base()
            print("‚úÖ LightRAG knowledge base initialized")

            # –ù–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏
            success = await self.pipeline.ingest_initial_technologies()
            if success:
                print("‚úÖ Initial technologies ingested successfully")
            else:
                print("‚ùå Failed to ingest initial technologies")
                return False

            print("üéâ Knowledge base initialization completed!")
            return True

        except Exception as e:
            print(f"‚ùå Failed to initialize knowledge base: {e}")
            return False

    async def search_technologies(self, query: str, limit: int = 10):
        """–ü–æ–∏—Å–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"""
        print(f"üîç Searching technologies: '{query}'")

        try:
            results = await self.lightrag_service.query_relevant_knowledge(query)

            print(f"\nüìä Found {len(results.nodes)} results:")
            print("-" * 50)

            for i, node in enumerate(results.nodes[:limit], 1):
                print(f"{i}. {node.name}")
                print(f"   Category: {node.metadata.get('category', 'Unknown')}")
                print(f"   Confidence: {node.confidence:.2f}")
                print(
                    f"   N8N Integrations: {', '.join(node.metadata.get('n8n_integrations', []))}"
                )
                print()

            return True

        except Exception as e:
            print(f"‚ùå Search failed: {e}")
            return False

    async def get_recommendations(self, project_context: Dict[str, Any]):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"""
        print("üéØ Getting technology recommendations...")
        print(f"Project context: {project_context}")

        try:
            recommendations = await self.pipeline.get_technology_recommendations(
                project_context
            )

            print(f"\nüöÄ Technology Recommendations:")
            print("-" * 50)

            for i, tech in enumerate(recommendations, 1):
                print(f"{i}. {tech.name}")
                print(f"   Category: {tech.category}")
                print(f"   Description: {tech.description}")
                print(f"   Use Cases: {', '.join(tech.use_cases)}")
                print(f"   N8N Integrations: {', '.join(tech.n8n_integrations)}")
                print(f"   Complexity: {tech.complexity_level}")
                print()

            return True

        except Exception as e:
            print(f"‚ùå Failed to get recommendations: {e}")
            return False

    async def get_workflow_suggestions(self, technologies: List[str]):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π n8n workflow"""
        print(f"üîÑ Getting n8n workflow suggestions for: {', '.join(technologies)}")

        try:
            suggestions = await self.pipeline.get_n8n_workflow_suggestions(technologies)

            print(f"\n‚ö° N8N Workflow Suggestions:")
            print("-" * 50)

            for i, workflow in enumerate(suggestions, 1):
                print(f"{i}. {workflow['name']}")
                print(f"   Description: {workflow['description']}")
                print(f"   Technologies: {', '.join(workflow['technologies'])}")
                print(f"   N8N Nodes: {', '.join(workflow['n8n_nodes'])}")
                print(f"   Complexity: {workflow['complexity']}")
                print()

            return True

        except Exception as e:
            print(f"‚ùå Failed to get workflow suggestions: {e}")
            return False

    async def update_popularity(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"""
        print("üìà Updating technology popularity...")

        try:
            success = await self.pipeline.update_technology_popularity()
            if success:
                print("‚úÖ Technology popularity updated successfully")
            else:
                print("‚ùå Failed to update technology popularity")
            return success

        except Exception as e:
            print(f"‚ùå Update failed: {e}")
            return False

    async def discover_new_technologies(self):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"""
        print("üîç Discovering new technologies...")

        try:
            new_technologies = await self.pipeline.discover_new_technologies()

            if new_technologies:
                print(f"üÜï Discovered {len(new_technologies)} new technologies:")
                for tech in new_technologies:
                    print(f"  - {tech.name} ({tech.category})")
            else:
                print("‚ÑπÔ∏è No new technologies discovered")

            return True

        except Exception as e:
            print(f"‚ùå Discovery failed: {e}")
            return False

    async def export_knowledge(self, output_file: str):
        """–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        print(f"üíæ Exporting knowledge base to {output_file}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            all_technologies = {}
            for tech_name, tech_entity in self.pipeline.predefined_technologies.items():
                all_technologies[tech_name] = {
                    "name": tech_entity.name,
                    "category": tech_entity.category,
                    "description": tech_entity.description,
                    "use_cases": tech_entity.use_cases,
                    "related_technologies": tech_entity.related_technologies,
                    "n8n_integrations": tech_entity.n8n_integrations,
                    "complexity_level": tech_entity.complexity_level,
                    "popularity_score": tech_entity.popularity_score,
                }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(output_file, "w", encoding="utf-8") as f:
                json.dump(all_technologies, f, indent=2, ensure_ascii=False)

            print(f"‚úÖ Knowledge base exported to {output_file}")
            return True

        except Exception as e:
            print(f"‚ùå Export failed: {e}")
            return False

    async def stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        print("üìä Knowledge Base Statistics")
        print("-" * 30)

        try:
            total_technologies = len(self.pipeline.predefined_technologies)

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories = {}
            for tech in self.pipeline.predefined_technologies.values():
                category = tech.category
                categories[category] = categories.get(category, 0) + 1

            print(f"Total Technologies: {total_technologies}")
            print("\nBy Category:")
            for category, count in sorted(categories.items()):
                print(f"  {category}: {count}")

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º n8n –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            all_integrations = set()
            for tech in self.pipeline.predefined_technologies.values():
                all_integrations.update(tech.n8n_integrations)

            print(f"\nN8N Integrations: {len(all_integrations)}")
            print("Available integrations:")
            for integration in sorted(all_integrations):
                print(f"  - {integration}")

            return True

        except Exception as e:
            print(f"‚ùå Stats failed: {e}")
            return False

    async def sync_with_context7(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Context7"""
        print("üîÑ Syncing with Context7...")

        try:
            results = await self.pipeline.sync_with_context7()

            print(f"\nüìä Context7 Sync Results:")
            print("-" * 50)
            print(f"Technologies Processed: {results['technologies_processed']}")
            print(f"Technologies Enriched: {results['technologies_enriched']}")
            print(
                f"New Technologies Discovered: {results['new_technologies_discovered']}"
            )
            print(f"Documents Added: {results['documents_added']}")

            if results["errors"]:
                print(f"\n‚ùå Errors ({len(results['errors'])}):")
                for error in results["errors"]:
                    print(
                        f"  - {error.get('technology', 'Unknown')}: {error.get('error', 'Unknown error')}"
                    )
            else:
                print("\n‚úÖ No errors occurred during sync")

            print("\nüéâ Context7 sync completed successfully!")
            return True

        except Exception as e:
            print(f"‚ùå Context7 sync failed: {e}")
            return False

    async def enrich_technology(self, technology_name: str):
        """–û–±–æ–≥–∞—â–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Context7"""
        print(f"üîç Enriching {technology_name} with Context7 data...")

        try:
            success = await self.pipeline.enrich_technology_with_context7(
                technology_name
            )

            if success:
                print(f"‚úÖ {technology_name} enriched successfully with Context7 data")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if technology_name.lower() in self.pipeline.predefined_technologies:
                    tech = self.pipeline.predefined_technologies[
                        technology_name.lower()
                    ]
                    print(f"\nüìã Updated Technology Information:")
                    print(f"  Name: {tech.name}")
                    print(f"  Category: {tech.category}")
                    print(f"  Use Cases: {', '.join(tech.use_cases)}")
                    print(
                        f"  Related Technologies: {', '.join(tech.related_technologies)}"
                    )
                    print(f"  N8N Integrations: {', '.join(tech.n8n_integrations)}")
                    print(f"  Complexity: {tech.complexity_level}")
            else:
                print(f"‚ùå Failed to enrich {technology_name} with Context7 data")

            return success

        except Exception as e:
            print(f"‚ùå Technology enrichment failed: {e}")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(description="Knowledge Management CLI")
    subparsers = parser.add_subparsers(dest="command", help="Available commands")

    # –ö–æ–º–∞–Ω–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    subparsers.add_parser("init", help="Initialize knowledge base")

    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞
    search_parser = subparsers.add_parser("search", help="Search technologies")
    search_parser.add_argument("query", help="Search query")
    search_parser.add_argument("--limit", type=int, default=10, help="Limit results")

    # –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    recommend_parser = subparsers.add_parser(
        "recommend", help="Get technology recommendations"
    )
    recommend_parser.add_argument("--technologies", nargs="+", help="Technologies list")
    recommend_parser.add_argument("--architecture", help="Architecture type")
    recommend_parser.add_argument("--use-cases", nargs="+", help="Use cases list")

    # –ö–æ–º–∞–Ω–¥–∞ workflow –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    workflow_parser = subparsers.add_parser(
        "workflows", help="Get n8n workflow suggestions"
    )
    workflow_parser.add_argument("technologies", nargs="+", help="Technologies list")

    # –ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    subparsers.add_parser("update", help="Update technology popularity")

    # –ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
    subparsers.add_parser("discover", help="Discover new technologies")

    # –ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_parser = subparsers.add_parser("export", help="Export knowledge base")
    export_parser.add_argument("output", help="Output file path")

    # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    subparsers.add_parser("stats", help="Show knowledge base statistics")

    # –ö–æ–º–∞–Ω–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Context7
    subparsers.add_parser(
        "sync-context7", help="Sync with Context7 for latest technology data"
    )

    # –ö–æ–º–∞–Ω–¥–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    enrich_parser = subparsers.add_parser(
        "enrich", help="Enrich technology with Context7 data"
    )
    enrich_parser.add_argument("technology", help="Technology name to enrich")

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CLI
    cli = KnowledgeManagerCLI()

    try:
        await cli.initialize()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        if args.command == "init":
            await cli.init_knowledge_base()

        elif args.command == "search":
            await cli.search_technologies(args.query, args.limit)

        elif args.command == "recommend":
            project_context = {
                "technologies": args.technologies or [],
                "architecture": args.architecture or "not specified",
                "use_cases": args.use_cases or [],
            }
            await cli.get_recommendations(project_context)

        elif args.command == "workflows":
            await cli.get_workflow_suggestions(args.technologies)

        elif args.command == "update":
            await cli.update_popularity()

        elif args.command == "discover":
            await cli.discover_new_technologies()

        elif args.command == "export":
            await cli.export_knowledge(args.output)

        elif args.command == "stats":
            await cli.stats()

        elif args.command == "sync-context7":
            await cli.sync_with_context7()

        elif args.command == "enrich":
            await cli.enrich_technology(args.technology)

    finally:
        await cli.close()


if __name__ == "__main__":
    asyncio.run(main())
