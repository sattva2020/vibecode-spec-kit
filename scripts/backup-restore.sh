#!/bin/bash

# üíæ Backup and Restore Script for RAG-Powered Code Assistant
# 
# –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É:
# - Supabase database
# - LightRAG knowledge base
# - n8n workflows
# - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# - Docker volumes

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKUP_DIR="/backups"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
CURRENT_BACKUP_DIR="$BACKUP_DIR/$TIMESTAMP"

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è backup
create_backup() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è backup
    mkdir -p "$CURRENT_BACKUP_DIR"
    
    # 1. Backup Supabase database
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ backup Supabase database..."
    if docker exec rag-supabase-db pg_dump -U postgres postgres > "$CURRENT_BACKUP_DIR/supabase_backup.sql"; then
        log_success "Supabase database backup —Å–æ–∑–¥–∞–Ω"
    else
        log_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup Supabase database"
        return 1
    fi
    
    # 2. Backup LightRAG knowledge base
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ backup LightRAG knowledge base..."
    if docker cp rag-lightrag:/app/knowledge_base "$CURRENT_BACKUP_DIR/lightrag_knowledge_base" 2>/dev/null; then
        log_success "LightRAG knowledge base backup —Å–æ–∑–¥–∞–Ω"
    else
        log_warning "LightRAG knowledge base –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç"
    fi
    
    # 3. Backup n8n workflows
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ backup n8n workflows..."
    if curl -s -H "X-N8N-API-KEY: ${N8N_API_KEY:-test-key}" \
        http://localhost:5678/api/v1/workflows > "$CURRENT_BACKUP_DIR/n8n_workflows.json"; then
        log_success "n8n workflows backup —Å–æ–∑–¥–∞–Ω"
    else
        log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å backup n8n workflows"
    fi
    
    # 4. Backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π..."
    cp -r ./supabase "$CURRENT_BACKUP_DIR/" 2>/dev/null || log_warning "Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    cp docker-compose-rag-system.yml "$CURRENT_BACKUP_DIR/" 2>/dev/null || log_warning "Docker-compose —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    cp .env "$CURRENT_BACKUP_DIR/" 2>/dev/null || log_warning ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    cp prometheus.yml "$CURRENT_BACKUP_DIR/" 2>/dev/null || log_warning "Prometheus –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    cp alertmanager.yml "$CURRENT_BACKUP_DIR/" 2>/dev/null || log_warning "Alertmanager –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    cp alerts.yml "$CURRENT_BACKUP_DIR/" 2>/dev/null || log_warning "–ê–ª–µ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    cp -r ./grafana "$CURRENT_BACKUP_DIR/" 2>/dev/null || log_warning "Grafana –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    # 5. Backup Docker volumes
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ backup Docker volumes..."
    docker run --rm -v rag_supabase_db_data:/data -v "$CURRENT_BACKUP_DIR":/backup alpine \
        tar czf /backup/supabase_db_data.tar.gz -C /data . 2>/dev/null || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å backup Supabase DB volume"
    
    docker run --rm -v rag_prometheus_data:/data -v "$CURRENT_BACKUP_DIR":/backup alpine \
        tar czf /backup/prometheus_data.tar.gz -C /data . 2>/dev/null || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å backup Prometheus volume"
    
    docker run --rm -v rag_grafana_data:/data -v "$CURRENT_BACKUP_DIR":/backup alpine \
        tar czf /backup/grafana_data.tar.gz -C /data . 2>/dev/null || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å backup Grafana volume"
    
    # 6. –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö backup
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö backup..."
    cat > "$CURRENT_BACKUP_DIR/backup_metadata.json" << EOF
{
  "timestamp": "$(date -Iseconds)",
  "version": "1.0",
  "system": "RAG-Powered Code Assistant",
  "components": {
    "supabase_db": true,
    "lightrag_knowledge": true,
    "n8n_workflows": true,
    "configurations": true,
    "docker_volumes": true
  },
  "size_bytes": $(du -sb "$CURRENT_BACKUP_DIR" | cut -f1),
  "docker_containers": [
    $(docker ps --format '"{{.Names}}"' | tr '\n' ',' | sed 's/,$//')
  ]
}
EOF
    
    # 7. –°–∂–∞—Ç–∏–µ backup
    log_info "–°–∂–∞—Ç–∏–µ backup..."
    tar -czf "$CURRENT_BACKUP_DIR.tar.gz" -C "$BACKUP_DIR" "$(basename "$CURRENT_BACKUP_DIR")"
    rm -rf "$CURRENT_BACKUP_DIR"
    
    local backup_size=$(du -h "$CURRENT_BACKUP_DIR.tar.gz" | cut -f1)
    log_success "Backup —Å–æ–∑–¥–∞–Ω: $CURRENT_BACKUP_DIR.tar.gz (—Ä–∞–∑–º–µ—Ä: $backup_size)"
    
    # 8. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
    log_info "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup..."
    ls -t "$BACKUP_DIR"/*.tar.gz 2>/dev/null | tail -n +11 | xargs -r rm
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ backup
restore_backup() {
    local backup_file="$1"
    
    if [ -z "$backup_file" ]; then
        log_error "–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª backup: $0 restore backup.tar.gz"
        return 1
    fi
    
    if [ ! -f "$backup_file" ]; then
        log_error "–§–∞–π–ª backup –Ω–µ –Ω–∞–π–¥–µ–Ω: $backup_file"
        return 1
    fi
    
    log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–∑ $backup_file..."
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    local restore_dir=$(mktemp -d)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º backup
    log_info "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ backup..."
    tar -xzf "$backup_file" -C "$restore_dir"
    
    local extracted_dir=$(find "$restore_dir" -maxdepth 1 -type d -name "*" | head -n 1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    if [ -f "$extracted_dir/backup_metadata.json" ]; then
        log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö backup..."
        local backup_timestamp=$(jq -r '.timestamp' "$extracted_dir/backup_metadata.json")
        log_success "Backup —Å–æ–∑–¥–∞–Ω: $backup_timestamp"
    fi
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker-compose-rag-system.yml down
    
    # 1. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Supabase database
    log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Supabase database..."
    docker-compose -f docker-compose-rag-system.yml up -d supabase-db
    sleep 10
    
    if [ -f "$extracted_dir/supabase_backup.sql" ]; then
        docker exec -i rag-supabase-db psql -U postgres postgres < "$extracted_dir/supabase_backup.sql"
        log_success "Supabase database –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        log_warning "Supabase database backup –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # 2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ LightRAG knowledge base
    log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ LightRAG knowledge base..."
    docker-compose -f docker-compose-rag-system.yml up -d lightrag
    sleep 5
    
    if [ -d "$extracted_dir/lightrag_knowledge_base" ]; then
        docker cp "$extracted_dir/lightrag_knowledge_base" rag-lightrag:/app/
        log_success "LightRAG knowledge base –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        log_warning "LightRAG knowledge base backup –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # 3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Docker volumes
    log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Docker volumes..."
    
    if [ -f "$extracted_dir/supabase_db_data.tar.gz" ]; then
        docker run --rm -v rag_supabase_db_data:/data -v "$extracted_dir":/backup alpine \
            sh -c "rm -rf /data/* && tar xzf /backup/supabase_db_data.tar.gz -C /data"
        log_success "Supabase DB volume –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    if [ -f "$extracted_dir/prometheus_data.tar.gz" ]; then
        docker run --rm -v rag_prometheus_data:/data -v "$extracted_dir":/backup alpine \
            sh -c "rm -rf /data/* && tar xzf /backup/prometheus_data.tar.gz -C /data"
        log_success "Prometheus volume –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    if [ -f "$extracted_dir/grafana_data.tar.gz" ]; then
        docker run --rm -v rag_grafana_data:/data -v "$extracted_dir":/backup alpine \
            sh -c "rm -rf /data/* && tar xzf /backup/grafana_data.tar.gz -C /data"
        log_success "Grafana volume –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # 4. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π..."
    
    if [ -d "$extracted_dir/supabase" ]; then
        cp -r "$extracted_dir/supabase" ./
        log_success "Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    fi
    
    if [ -f "$extracted_dir/docker-compose-rag-system.yml" ]; then
        cp "$extracted_dir/docker-compose-rag-system.yml" ./
        log_success "Docker-compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    fi
    
    if [ -f "$extracted_dir/.env" ]; then
        cp "$extracted_dir/.env" ./
        log_success ".env –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    fi
    
    if [ -f "$extracted_dir/prometheus.yml" ]; then
        cp "$extracted_dir/prometheus.yml" ./
        log_success "Prometheus –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    fi
    
    if [ -f "$extracted_dir/alertmanager.yml" ]; then
        cp "$extracted_dir/alertmanager.yml" ./
        log_success "Alertmanager –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    fi
    
    if [ -f "$extracted_dir/alerts.yml" ]; then
        cp "$extracted_dir/alerts.yml" ./
        log_success "–ê–ª–µ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    fi
    
    if [ -d "$extracted_dir/grafana" ]; then
        cp -r "$extracted_dir/grafana" ./
        log_success "Grafana –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    fi
    
    # 5. –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    log_info "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker-compose-rag-system.yml up -d
    
    # 6. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ n8n workflows (–ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ n8n)
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ n8n..."
    sleep 15
    
    if [ -f "$extracted_dir/n8n_workflows.json" ]; then
        log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ n8n workflows..."
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–º–ø–æ—Ä—Ç–∞ workflows —á–µ—Ä–µ–∑ n8n API
        log_success "n8n workflows –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    fi
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    rm -rf "$restore_dir"
    
    log_success "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã..."
    ./scripts/health-check.sh
}

# –§—É–Ω–∫—Ü–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö backup
list_backups() {
    log_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ backup:"
    
    if [ ! -d "$BACKUP_DIR" ] || [ -z "$(ls -A "$BACKUP_DIR" 2>/dev/null)" ]; then
        log_warning "Backup –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 0
    fi
    
    echo ""
    printf "%-20s %-20s %-10s %s\n" "–§–∞–π–ª" "–î–∞—Ç–∞" "–†–∞–∑–º–µ—Ä" "–°—Ç–∞—Ç—É—Å"
    echo "----------------------------------------------------------------"
    
    for backup_file in "$BACKUP_DIR"/*.tar.gz; do
        if [ -f "$backup_file" ]; then
            local filename=$(basename "$backup_file")
            local date_str=$(echo "$filename" | cut -d'_' -f1-2 | tr '_' ' ')
            local size=$(du -h "$backup_file" | cut -f1)
            local status="OK"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å backup
            if ! tar -tzf "$backup_file" > /dev/null 2>&1; then
                status="–ü–û–í–†–ï–ñ–î–ï–ù"
            fi
            
            printf "%-20s %-20s %-10s %s\n" "$filename" "$date_str" "$size" "$status"
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ backup
auto_backup() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ backup..."
    
    # –°–æ–∑–¥–∞–µ–º cron job –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ backup –≤ 2:00
    local cron_job="0 2 * * * cd $(pwd) && $0 backup >> /var/log/rag-backup.log 2>&1"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ crontab (—Ç—Ä–µ–±—É–µ—Ç sudo)
    if command -v crontab >/dev/null 2>&1; then
        (crontab -l 2>/dev/null; echo "$cron_job") | crontab -
        log_success "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π backup –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 2:00)"
    else
        log_warning "crontab –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π backup –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-}" in
        "backup")
            create_backup
            ;;
        "restore")
            restore_backup "$2"
            ;;
        "list")
            list_backups
            ;;
        "auto")
            auto_backup
            ;;
        *)
            echo "üíæ Backup and Restore Script –¥–ª—è RAG-Powered Code Assistant"
            echo "=========================================================="
            echo ""
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <command> [options]"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  backup                    –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"
            echo "  restore <backup_file>     –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ backup"
            echo "  list                      –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ backup"
            echo "  auto                      –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π backup"
            echo ""
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  $0 backup"
            echo "  $0 restore /backups/20241005_140000.tar.gz"
            echo "  $0 list"
            echo "  $0 auto"
            echo ""
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@"
