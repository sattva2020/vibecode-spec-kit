#!/bin/bash

# üß™ End-to-End Testing Script for RAG-Powered Code Assistant
# 
# –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:
# 1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
# 2. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
# 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
# 4. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
# 5. –°–æ–∑–¥–∞–Ω–∏–µ n8n workflow
# 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL="http://localhost:8000"
SUPABASE_URL="http://localhost:54321"
N8N_URL="http://localhost:5678"
TEST_EMAIL="test@example.com"
TEST_PASSWORD="testpassword123"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
check_service() {
    local service_name=$1
    local url=$2
    local expected_status=${3:-200}
    
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ $service_name..."
    
    local response_code=$(curl -s -o /dev/null -w "%{http_code}" "$url" || echo "000")
    
    if [ "$response_code" = "$expected_status" ]; then
        log_success "$service_name –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $response_code)"
        return 0
    else
        log_error "$service_name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $response_code)"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
make_request() {
    local method=$1
    local url=$2
    local data=$3
    local headers=$4
    local expected_status=${5:-200}
    
    local curl_cmd="curl -s -w '\n%{http_code}'"
    
    if [ -n "$data" ]; then
        curl_cmd="$curl_cmd -d '$data'"
    fi
    
    if [ -n "$headers" ]; then
        curl_cmd="$curl_cmd -H '$headers'"
    fi
    
    curl_cmd="$curl_cmd -X $method '$url'"
    
    local response=$(eval $curl_cmd)
    local http_code=$(echo "$response" | tail -n1)
    local body=$(echo "$response" | head -n -1)
    
    if [ "$http_code" = "$expected_status" ]; then
        echo "$body"
        return 0
    else
        log_error "HTTP $http_code: $body"
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
main() {
    echo "üß™ –ó–∞–ø—É—Å–∫ End-to-End —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG-Powered Code Assistant"
    echo "=========================================================="
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    check_service "AI Router" "$BASE_URL/health" || exit 1
    check_service "Supabase Auth" "$SUPABASE_URL/auth/v1/health" || exit 1
    check_service "Supabase DB" "$SUPABASE_URL/rest/v1/" 401 || exit 1
    check_service "n8n" "$N8N_URL/healthz" || exit 1
    check_service "Ollama" "http://localhost:11434/api/tags" || exit 1
    
    log_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã!"
    echo ""
    
    # –®–∞–≥ 1: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    log_info "–®–∞–≥ 1: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    local auth_response=$(make_request "POST" \
        "$SUPABASE_URL/auth/v1/token?grant_type=password" \
        "{\"email\":\"$TEST_EMAIL\",\"password\":\"$TEST_PASSWORD\"}" \
        "Content-Type: application/json" \
        200)
    
    local jwt_token=$(echo "$auth_response" | jq -r '.access_token // empty')
    
    if [ -z "$jwt_token" ] || [ "$jwt_token" = "null" ]; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω"
        exit 1
    fi
    
    log_success "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø–æ–ª—É—á–µ–Ω JWT —Ç–æ–∫–µ–Ω"
    echo ""
    
    # –®–∞–≥ 2: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
    log_info "–®–∞–≥ 2: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Ollama"
    
    local search_payload='{
        "query": "user authentication middleware",
        "context": "express_typescript_project",
        "type": "semantic",
        "limit": 5
    }'
    
    local search_response=$(make_request "POST" \
        "$BASE_URL/api/v1/search" \
        "$search_payload" \
        "Content-Type: application/json
Authorization: Bearer $jwt_token" \
        200)
    
    local search_results_count=$(echo "$search_response" | jq '.results | length')
    local search_provider=$(echo "$search_response" | jq -r '.provider')
    
    if [ "$search_provider" != "ollama" ]; then
        log_warning "–û–∂–∏–¥–∞–ª—Å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä 'ollama', –ø–æ–ª—É—á–µ–Ω '$search_provider'"
    fi
    
    log_success "–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ $search_results_count —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ $search_provider"
    echo ""
    
    # –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
    log_info "–®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ —á–µ—Ä–µ–∑ AI"
    
    local generation_payload='{
        "task_type": "code_generation",
        "language": "typescript",
        "description": "Create a user authentication middleware for Express.js with JWT validation",
        "complexity": "medium",
        "context": {
            "framework": "express",
            "database": "postgresql",
            "authentication": "jwt"
        }
    }'
    
    local generation_response=$(make_request "POST" \
        "$BASE_URL/api/v1/generate" \
        "$generation_payload" \
        "Content-Type: application/json
Authorization: Bearer $jwt_token" \
        200)
    
    local generated_code_length=$(echo "$generation_response" | jq '.code | length')
    local generation_provider=$(echo "$generation_response" | jq -r '.provider')
    
    log_success "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞: —Å–æ–∑–¥–∞–Ω–æ $generated_code_length —Å–∏–º–≤–æ–ª–æ–≤ —á–µ—Ä–µ–∑ $generation_provider"
    echo ""
    
    # –®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
    log_info "–®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"
    
    local code_to_analyze=$(echo "$generation_response" | jq -r '.code')
    
    local analysis_payload=$(jq -n \
        --arg code "$code_to_analyze" \
        '{
            task_type: "code_analysis",
            code: $code,
            language: "typescript",
            analysis_type: "security_and_performance",
            complexity: "medium"
        }')
    
    local analysis_response=$(make_request "POST" \
        "$BASE_URL/api/v1/analyze" \
        "$analysis_payload" \
        "Content-Type: application/json
Authorization: Bearer $jwt_token" \
        200)
    
    local suggestions_count=$(echo "$analysis_response" | jq '.suggestions | length')
    local analysis_provider=$(echo "$analysis_response" | jq -r '.provider')
    
    log_success "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞: –ø–æ–ª—É—á–µ–Ω–æ $suggestions_count –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ $analysis_provider"
    echo ""
    
    # –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ n8n workflow
    log_info "–®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ n8n workflow"
    
    local workflow_payload='{
        "name": "E2E Test Workflow",
        "description": "Automated test workflow for code analysis",
        "nodes": [
            {
                "name": "Webhook",
                "type": "n8n-nodes-base.webhook",
                "parameters": {
                    "path": "e2e-test-webhook",
                    "httpMethod": "POST"
                }
            },
            {
                "name": "AI Analysis",
                "type": "n8n-nodes-base.httpRequest",
                "parameters": {
                    "url": "http://ai-router:8000/api/v1/analyze",
                    "method": "POST",
                    "headers": {
                        "Content-Type": "application/json",
                        "Authorization": "Bearer '${jwt_token}'"
                    }
                }
            }
        ],
        "connections": {
            "Webhook": {
                "main": [["AI Analysis"]]
            }
        }
    }'
    
    local workflow_response=$(make_request "POST" \
        "$N8N_URL/api/v1/workflows" \
        "$workflow_payload" \
        "Content-Type: application/json
X-N8N-API-KEY: ${N8N_API_KEY:-test-key}" \
        201)
    
    local workflow_id=$(echo "$workflow_response" | jq -r '.id')
    
    log_success "n8n workflow —Å–æ–∑–¥–∞–Ω —Å ID: $workflow_id"
    echo ""
    
    # –®–∞–≥ 6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Supabase
    log_info "–®–∞–≥ 6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Supabase"
    
    local save_payload=$(jq -n \
        --arg code "$code_to_analyze" \
        --arg analysis "$analysis_response" \
        '{
            title: "E2E Test Code Generation",
            code: $code,
            language: "typescript",
            analysis: $analysis,
            test_timestamp: now
        }')
    
    local save_response=$(make_request "POST" \
        "$SUPABASE_URL/rest/v1/code_snippets" \
        "$save_payload" \
        "Content-Type: application/json
Authorization: Bearer $jwt_token
apikey: ${SUPABASE_ANON_KEY:-test-key}" \
        201)
    
    local saved_id=$(echo "$save_response" | jq -r '.id')
    
    log_success "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Supabase —Å ID: $saved_id"
    echo ""
    
    # –®–∞–≥ 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    log_info "–®–∞–≥ 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    
    local start_time=$(date +%s%3N)
    
    make_request "POST" \
        "$BASE_URL/api/v1/search" \
        '{"query": "performance test", "context": "test", "type": "semantic"}' \
        "Content-Type: application/json
Authorization: Bearer $jwt_token" \
        200 > /dev/null
    
    local end_time=$(date +%s%3N)
    local response_time=$((end_time - start_time))
    
    log_success "–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${response_time}ms"
    
    if [ $response_time -lt 2000 ]; then
        log_success "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –æ—Ç–ª–∏—á–Ω–æ (< 2s)"
    elif [ $response_time -lt 5000 ]; then
        log_warning "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ (< 5s)"
    else
        log_error "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ø–ª–æ—Ö–æ (> 5s)"
    fi
    echo ""
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    echo "üéâ End-to-End —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    echo "=============================================="
    echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    echo "  ‚Ä¢ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚úÖ –£—Å–ø–µ—à–Ω–æ"
    echo "  ‚Ä¢ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: ‚úÖ $search_results_count —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    echo "  ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞: ‚úÖ $generated_code_length —Å–∏–º–≤–æ–ª–æ–≤"
    echo "  ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞: ‚úÖ $suggestions_count –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
    echo "  ‚Ä¢ n8n workflow: ‚úÖ ID $workflow_id"
    echo "  ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ‚úÖ ID $saved_id"
    echo "  ‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ‚úÖ ${response_time}ms"
    echo ""
    echo "üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
trap 'log_error "–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω —Å –æ—à–∏–±–∫–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫–µ $LINENO"' ERR

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
main "$@"
