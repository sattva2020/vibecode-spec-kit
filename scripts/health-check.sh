#!/bin/bash

# üè• Health Check Script for RAG-Powered Code Assistant
# 
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã:
# - AI Router Service
# - Supabase Stack (DB, Auth, Kong)
# - Ollama Service
# - LightRAG Service
# - n8n Workflows
# - VS Code Extension

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL="http://localhost:8000"
SUPABASE_URL="http://localhost:54321"
N8N_URL="http://localhost:5678"
OLLAMA_URL="http://localhost:11434"
LIGHTRAG_URL="http://localhost:8001"

# –°—á–µ—Ç—á–∏–∫–∏
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0
WARNING_CHECKS=0

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
    ((PASSED_CHECKS++))
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    ((WARNING_CHECKS++))
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
    ((FAILED_CHECKS++))
}

log_header() {
    echo -e "${PURPLE}üîç $1${NC}"
}

log_section() {
    echo -e "${CYAN}üìã $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP endpoint
check_http_endpoint() {
    local name=$1
    local url=$2
    local expected_status=${3:-200}
    local timeout=${4:-10}
    local auth_header=${5:-""}
    
    ((TOTAL_CHECKS++))
    
    local curl_cmd="curl -s -o /dev/null -w '%{http_code}' --max-time $timeout"
    
    if [ -n "$auth_header" ]; then
        curl_cmd="$curl_cmd -H '$auth_header'"
    fi
    
    curl_cmd="$curl_cmd '$url'"
    
    local response_code
    if response_code=$(eval "$curl_cmd" 2>/dev/null); then
        if [ "$response_code" = "$expected_status" ]; then
            log_success "$name: HTTP $response_code"
            return 0
        else
            log_error "$name: HTTP $response_code (–æ–∂–∏–¥–∞–ª—Å—è $expected_status)"
            return 1
        fi
    else
        log_error "$name: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (timeout –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
check_docker_container() {
    local container_name=$1
    local service_name=${2:-$container_name}
    
    ((TOTAL_CHECKS++))
    
    if docker ps --format "table {{.Names}}" | grep -q "^$container_name$"; then
        local status=$(docker inspect --format='{{.State.Status}}' "$container_name" 2>/dev/null)
        local health=$(docker inspect --format='{{.State.Health.Status}}' "$container_name" 2>/dev/null || echo "no-health-check")
        
        if [ "$status" = "running" ]; then
            if [ "$health" = "healthy" ] || [ "$health" = "no-health-check" ]; then
                log_success "$service_name: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
                return 0
            else
                log_warning "$service_name: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω, –Ω–æ health check: $health"
                return 1
            fi
        else
            log_error "$service_name: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ —Å—Ç–∞—Ç—É—Å–µ '$status'"
            return 1
        fi
    else
        log_error "$service_name: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞
check_port() {
    local port=$1
    local service_name=$2
    
    ((TOTAL_CHECKS++))
    
    if netstat -an 2>/dev/null | grep -q ":$port " || ss -an 2>/dev/null | grep -q ":$port "; then
        log_success "$service_name: –ø–æ—Ä—Ç $port –æ—Ç–∫—Ä—ã—Ç"
        return 0
    else
        log_error "$service_name: –ø–æ—Ä—Ç $port –Ω–µ –æ—Ç–∫—Ä—ã—Ç"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
check_resource_usage() {
    local container_name=$1
    local service_name=${2:-$container_name}
    
    ((TOTAL_CHECKS++))
    
    local stats
    if stats=$(docker stats --no-stream --format "{{.CPUPerc}},{{.MemUsage}}" "$container_name" 2>/dev/null); then
        local cpu_usage=$(echo "$stats" | cut -d',' -f1 | sed 's/%//')
        local mem_usage=$(echo "$stats" | cut -d',' -f2 | sed 's/MiB.*//')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CPU (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ >80%, –æ—à–∏–±–∫–∞ –ø—Ä–∏ >95%)
        if (( $(echo "$cpu_usage > 95" | bc -l) )); then
            log_error "$service_name: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU ($cpu_usage%)"
            return 1
        elif (( $(echo "$cpu_usage > 80" | bc -l) )); then
            log_warning "$service_name: –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU ($cpu_usage%)"
        else
            log_success "$service_name: CPU $cpu_usage%"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ >85%, –æ—à–∏–±–∫–∞ –ø—Ä–∏ >95%)
        if (( $(echo "$mem_usage > 95" | bc -l) )); then
            log_error "$service_name: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (${mem_usage}MB)"
            return 1
        elif (( $(echo "$mem_usage > 85" | bc -l) )); then
            log_warning "$service_name: –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (${mem_usage}MB)"
        else
            log_success "$service_name: –ø–∞–º—è—Ç—å ${mem_usage}MB"
        fi
        
        return 0
    else
        log_error "$service_name: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
check_logs_for_errors() {
    local container_name=$1
    local service_name=${2:-$container_name}
    local lines=${3:-50}
    
    ((TOTAL_CHECKS++))
    
    local error_count
    if error_count=$(docker logs --tail "$lines" "$container_name" 2>&1 | grep -i "error\|exception\|fatal\|panic" | wc -l); then
        if [ "$error_count" -eq 0 ]; then
            log_success "$service_name: –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            return 0
        elif [ "$error_count" -lt 5 ]; then
            log_warning "$service_name: –Ω–∞–π–¥–µ–Ω–æ $error_count –æ—à–∏–±–æ–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö $lines —Å—Ç—Ä–æ–∫–∞—Ö –ª–æ–≥–æ–≤"
            return 1
        else
            log_error "$service_name: –Ω–∞–π–¥–µ–Ω–æ $error_count –æ—à–∏–±–æ–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö $lines —Å—Ç—Ä–æ–∫–∞—Ö –ª–æ–≥–æ–≤"
            return 1
        fi
    else
        log_warning "$service_name: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏"
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
main() {
    echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã RAG-Powered Code Assistant"
    echo "======================================================="
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    log_section "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    
    check_docker_container "rag-ai-router" "AI Router"
    check_docker_container "rag-supabase-db" "Supabase Database"
    check_docker_container "rag-supabase-kong" "Kong API Gateway"
    check_docker_container "rag-supabase-auth" "Supabase Auth"
    check_docker_container "rag-supabase-storage" "Supabase Storage"
    check_docker_container "rag-supabase-realtime" "Supabase Realtime"
    check_docker_container "rag-ollama" "Ollama Service"
    check_docker_container "rag-lightrag" "LightRAG Service"
    check_docker_container "rag-n8n" "n8n Workflows"
    check_docker_container "rag-prometheus" "Prometheus"
    check_docker_container "rag-grafana" "Grafana"
    
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    log_section "–°–µ—Ç–µ–≤—ã–µ –ø–æ—Ä—Ç—ã"
    
    check_port 8000 "AI Router"
    check_port 5432 "Supabase DB"
    check_port 54321 "Supabase API"
    check_port 11434 "Ollama"
    check_port 8001 "LightRAG"
    check_port 5678 "n8n"
    check_port 9090 "Prometheus"
    check_port 3000 "Grafana"
    
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP endpoints
    log_section "HTTP Endpoints"
    
    check_http_endpoint "AI Router Health" "$BASE_URL/health"
    check_http_endpoint "AI Router Metrics" "$BASE_URL/metrics"
    check_http_endpoint "Supabase Health" "$SUPABASE_URL/rest/v1/" 401
    check_http_endpoint "Supabase Auth" "$SUPABASE_URL/auth/v1/health"
    check_http_endpoint "Ollama API" "$OLLAMA_URL/api/tags"
    check_http_endpoint "LightRAG Health" "$LIGHTRAG_URL/health"
    check_http_endpoint "n8n Health" "$N8N_URL/healthz"
    check_http_endpoint "Prometheus" "http://localhost:9090/-/healthy"
    check_http_endpoint "Grafana" "http://localhost:3000/api/health"
    
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    log_section "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"
    
    check_resource_usage "rag-ai-router" "AI Router"
    check_resource_usage "rag-supabase-db" "Supabase DB"
    check_resource_usage "rag-ollama" "Ollama"
    check_resource_usage "rag-lightrag" "LightRAG"
    check_resource_usage "rag-n8n" "n8n"
    
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
    log_section "–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤"
    
    check_logs_for_errors "rag-ai-router" "AI Router" 100
    check_logs_for_errors "rag-supabase-db" "Supabase DB" 100
    check_logs_for_errors "rag-ollama" "Ollama" 100
    check_logs_for_errors "rag-lightrag" "LightRAG" 100
    check_logs_for_errors "rag-n8n" "n8n" 100
    
    echo ""
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    log_section "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI –º–æ–¥–µ–ª–µ–π
    ((TOTAL_CHECKS++))
    if curl -s "$OLLAMA_URL/api/tags" | jq -e '.models[] | select(.name | contains("qwen2.5-coder"))' > /dev/null; then
        log_success "Ollama: –º–æ–¥–µ–ª—å qwen2.5-coder –¥–æ—Å—Ç—É–ø–Ω–∞"
        ((PASSED_CHECKS++))
    else
        log_warning "Ollama: –º–æ–¥–µ–ª—å qwen2.5-coder –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        ((WARNING_CHECKS++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    ((TOTAL_CHECKS++))
    if docker exec rag-supabase-db psql -U postgres -d postgres -c "SELECT 1;" > /dev/null 2>&1; then
        log_success "Supabase DB: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"
        ((PASSED_CHECKS++))
    else
        log_error "Supabase DB: –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"
        ((FAILED_CHECKS++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è pgvector
    ((TOTAL_CHECKS++))
    if docker exec rag-supabase-db psql -U postgres -d postgres -c "SELECT extname FROM pg_extension WHERE extname = 'vector';" | grep -q vector; then
        log_success "Supabase DB: —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        ((PASSED_CHECKS++))
    else
        log_error "Supabase DB: —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        ((FAILED_CHECKS++))
    fi
    
    echo ""
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    log_header "–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"
    echo "==================="
    echo "–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: $TOTAL_CHECKS"
    echo -e "${GREEN}–£—Å–ø–µ—à–Ω–æ: $PASSED_CHECKS${NC}"
    echo -e "${YELLOW}–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: $WARNING_CHECKS${NC}"
    echo -e "${RED}–û—à–∏–±–∫–∏: $FAILED_CHECKS${NC}"
    echo ""
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    if [ $FAILED_CHECKS -eq 0 ]; then
        if [ $WARNING_CHECKS -eq 0 ]; then
            log_success "üéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!"
            exit 0
        else
            log_warning "‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"
            exit 0
        fi
    else
        log_error "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã!"
        exit 1
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
while [[ $# -gt 0 ]]; do
    case $1 in
        --verbose)
            VERBOSE=true
            shift
            ;;
        --quick)
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            QUICK_CHECK=true
            shift
            ;;
        --help)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [--verbose] [--quick] [--help]"
            echo "  --verbose  –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
            echo "  --quick    –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
            echo "  --help     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            exit 0
            ;;
        *)
            echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1"
            exit 1
            ;;
    esac
done

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
