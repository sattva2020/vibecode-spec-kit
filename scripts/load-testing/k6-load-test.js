/**
 * K6 Load Testing Script for RAG-Powered Code Assistant
 * 
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
 * –°—Ü–µ–Ω–∞—Ä–∏–∏: —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞, –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤
 */

import http from 'k6/http';
import { check, sleep } from 'k6';
import { Rate } from 'k6/metrics';

// –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
export let errorRate = new Rate('errors');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
export let options = {
  stages: [
    { duration: '2m', target: 50 },   // Ramp up –¥–æ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    { duration: '5m', target: 50 },   // –°—Ç–∞–±–∏–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    { duration: '2m', target: 100 },  // Ramp up –¥–æ 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    { duration: '5m', target: 100 },  // –°—Ç–∞–±–∏–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    { duration: '2m', target: 200 },  // Ramp up –¥–æ 200 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    { duration: '5m', target: 200 },  // –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    { duration: '2m', target: 0 },    // Ramp down
  ],
  
  thresholds: {
    http_req_duration: ['p(95)<2000'], // 95% –∑–∞–ø—Ä–æ—Å–æ–≤ < 2 —Å–µ–∫
    http_req_failed: ['rate<0.1'],     // < 10% –æ—à–∏–±–æ–∫
    errors: ['rate<0.05'],             // < 5% –æ—à–∏–±–æ–∫
  },
};

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testQueries = [
  'authentication middleware',
  'database connection',
  'error handling',
  'API endpoint',
  'user validation',
  'file upload',
  'caching strategy',
  'security headers'
];

const codeSnippets = [
  'function calculateTotal(items) {',
  'class UserService {',
  'const express = require("express");',
  'interface ApiResponse {',
  'async function fetchData(url) {',
  'export const validateUser = (user) => {'
];

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞
export default function() {
  const scenario = Math.random();
  
  if (scenario < 0.4) {
    // 40% - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ (Ollama)
    testSemanticSearch();
  } else if (scenario < 0.7) {
    // 30% - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ (Claude/GPT-4)
    testCodeGeneration();
  } else if (scenario < 0.9) {
    // 20% - –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ (Claude)
    testCodeAnalysis();
  } else {
    // 10% - –°–æ–∑–¥–∞–Ω–∏–µ n8n workflow
    testN8nWorkflow();
  }
  
  sleep(Math.random() * 2 + 1); // 1-3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
}

/**
 * –¢–µ—Å—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Ollama
 */
function testSemanticSearch() {
  const query = testQueries[Math.floor(Math.random() * testQueries.length)];
  
  const payload = JSON.stringify({
    query: query,
    context: 'typescript_project',
    type: 'semantic',
    limit: 10
  });
  
  const params = {
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${__ENV.JWT_TOKEN}`
    },
  };
  
  const response = http.post(`${__ENV.BASE_URL}/api/v1/search`, payload, params);
  
  const success = check(response, {
    'semantic search status 200': (r) => r.status === 200,
    'semantic search response time < 2s': (r) => r.timings.duration < 2000,
    'semantic search has results': (r) => {
      try {
        const body = JSON.parse(r.body);
        return body.results && body.results.length > 0;
      } catch (e) {
        return false;
      }
    },
    'semantic search provider is ollama': (r) => {
      try {
        const body = JSON.parse(r.body);
        return body.provider === 'ollama';
      } catch (e) {
        return false;
      }
    }
  });
  
  errorRate.add(!success);
}

/**
 * –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Claude/GPT-4
 */
function testCodeGeneration() {
  const snippet = codeSnippets[Math.floor(Math.random() * codeSnippets.length)];
  
  const payload = JSON.stringify({
    task_type: 'code_generation',
    language: 'typescript',
    description: `Complete this code: ${snippet}`,
    complexity: Math.random() > 0.5 ? 'medium' : 'high',
    context: {
      framework: 'express',
      database: 'postgresql',
      testing: 'jest'
    }
  });
  
  const params = {
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${__ENV.JWT_TOKEN}`
    },
  };
  
  const response = http.post(`${__ENV.BASE_URL}/api/v1/generate`, payload, params);
  
  const success = check(response, {
    'code generation status 200': (r) => r.status === 200,
    'code generation response time < 5s': (r) => r.timings.duration < 5000,
    'code generation has valid code': (r) => {
      try {
        const body = JSON.parse(r.body);
        return body.code && body.code.length > 50;
      } catch (e) {
        return false;
      }
    },
    'code generation provider is claude or openai': (r) => {
      try {
        const body = JSON.parse(r.body);
        return ['claude', 'openai'].includes(body.provider);
      } catch (e) {
        return false;
      }
    }
  });
  
  errorRate.add(!success);
}

/**
 * –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Claude
 */
function testCodeAnalysis() {
  const codeSample = `
function processUserData(users) {
  return users.map(user => {
    if (user.age > 18) {
      return {
        name: user.name,
        email: user.email,
        status: 'active'
      };
    }
  });
}
  `;
  
  const payload = JSON.stringify({
    task_type: 'code_analysis',
    code: codeSample,
    language: 'javascript',
    analysis_type: 'security_and_performance',
    complexity: 'medium'
  });
  
  const params = {
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${__ENV.JWT_TOKEN}`
    },
  };
  
  const response = http.post(`${__ENV.BASE_URL}/api/v1/analyze`, payload, params);
  
  const success = check(response, {
    'code analysis status 200': (r) => r.status === 200,
    'code analysis response time < 3s': (r) => r.timings.duration < 3000,
    'code analysis has suggestions': (r) => {
      try {
        const body = JSON.parse(r.body);
        return body.suggestions && body.suggestions.length > 0;
      } catch (e) {
        return false;
      }
    },
    'code analysis provider is claude': (r) => {
      try {
        const body = JSON.parse(r.body);
        return body.provider === 'claude';
      } catch (e) {
        return false;
      }
    }
  });
  
  errorRate.add(!success);
}

/**
 * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è n8n workflow
 */
function testN8nWorkflow() {
  const payload = JSON.stringify({
    name: `Test Workflow ${Math.random().toString(36).substr(2, 9)}`,
    description: 'Automated test workflow for code analysis',
    trigger: {
      type: 'webhook',
      path: '/test-webhook'
    },
    nodes: [
      {
        name: 'Webhook',
        type: 'n8n-nodes-base.webhook',
        parameters: {
          path: 'test-webhook',
          httpMethod: 'POST'
        }
      },
      {
        name: 'AI Analysis',
        type: 'n8n-nodes-base.httpRequest',
        parameters: {
          url: 'http://ai-router:8000/api/v1/analyze',
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        }
      }
    ],
    connections: {
      'Webhook': {
        'main': [['AI Analysis']]
      }
    }
  });
  
  const params = {
    headers: {
      'Content-Type': 'application/json',
      'X-N8N-API-KEY': __ENV.N8N_API_KEY
    },
  };
  
  const response = http.post(`${__ENV.N8N_URL}/api/v1/workflows`, payload, params);
  
  const success = check(response, {
    'n8n workflow creation status 201': (r) => r.status === 201,
    'n8n workflow creation response time < 2s': (r) => r.timings.duration < 2000,
    'n8n workflow has id': (r) => {
      try {
        const body = JSON.parse(r.body);
        return body.id && body.id.length > 0;
      } catch (e) {
        return false;
      }
    }
  });
  
  errorRate.add(!success);
}

/**
 * Setup —Ñ—É–Ω–∫—Ü–∏—è - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
 */
export function setup() {
  console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
  const healthCheck = http.get(`${__ENV.BASE_URL}/health`);
  if (healthCheck.status !== 200) {
    throw new Error(`–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${__ENV.BASE_URL}`);
  }
  
  console.log('‚úÖ –°–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
  
  return {
    startTime: new Date().toISOString(),
    baseUrl: __ENV.BASE_URL
  };
}

/**
 * Teardown —Ñ—É–Ω–∫—Ü–∏—è - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
 */
export function teardown(data) {
  console.log('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
  console.log(`üìä –¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω: ${data.startTime}`);
  console.log(`üîó Base URL: ${data.baseUrl}`);
  console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}
