# Smart RAG Deployment Script
# –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Smart RAG —Å–∏—Å—Ç–µ–º—ã

Write-Host "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Smart RAG —Å–∏—Å—Ç–µ–º—ã..." -ForegroundColor Green

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
Write-Host "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..." -ForegroundColor Yellow
try {
    docker --version | Out-Null
    Write-Host "‚úÖ Docker –Ω–∞–π–¥–µ–Ω" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É." -ForegroundColor Red
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è n8n
Write-Host "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ n8n..." -ForegroundColor Yellow
try {
    $n8nResponse = Invoke-WebRequest -Uri "http://localhost:8080/api/v1/workflows" -Method GET -Headers @{"Authorization" = "Bearer $env:N8N_API_KEY"} -ErrorAction Stop
    Write-Host "‚úÖ n8n –¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Green
} catch {
    Write-Host "‚ùå n8n –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ n8n –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080." -ForegroundColor Red
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase
Write-Host "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase..." -ForegroundColor Yellow
try {
    $supabaseResponse = Invoke-WebRequest -Uri "http://localhost:5432/rest/v1/" -Method GET -ErrorAction Stop
    Write-Host "‚úÖ Supabase –¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Supabase –∑–∞–ø—É—â–µ–Ω." -ForegroundColor Red
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama
Write-Host "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama..." -ForegroundColor Yellow
try {
    $ollamaResponse = Invoke-WebRequest -Uri "http://localhost:11434/api/tags" -Method GET -ErrorAction Stop
    Write-Host "‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω." -ForegroundColor Red
    exit 1
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ Supabase
Write-Host "üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã knowledge_base –≤ Supabase..." -ForegroundColor Yellow
try {
    $sqlContent = Get-Content -Path "create-knowledge-table.sql" -Raw -Encoding UTF8
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —á–µ—Ä–µ–∑ psql (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    $psqlCommand = "psql -h localhost -p 5432 -U postgres -d postgres -c `"$sqlContent`""
    
    Write-Host "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: $psqlCommand" -ForegroundColor Gray
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ HTTP API
    $headers = @{
        "Authorization" = "Bearer $env:SUPABASE_ANON_KEY"
        "Content-Type" = "application/json"
        "apikey" = "$env:SUPABASE_ANON_KEY"
    }
    
    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ SQL endpoint
    $sqlPayload = @{
        query = $sqlContent
    } | ConvertTo-Json
    
    try {
        $sqlResponse = Invoke-WebRequest -Uri "http://localhost:5432/rest/v1/rpc/exec_sql" -Method POST -Headers $headers -Body $sqlPayload -ErrorAction Stop
        Write-Host "‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ API" -ForegroundColor Green
    } catch {
        Write-Host "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ API. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤—Ä—É—á–Ω—É—é –≤ Supabase UI." -ForegroundColor Yellow
        Write-Host "SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:" -ForegroundColor Cyan
        Write-Host $sqlContent -ForegroundColor White
    }
    
} catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: $_" -ForegroundColor Red
}

# –°–æ–∑–¥–∞–Ω–∏–µ workflows –≤ n8n
Write-Host "üîß –°–æ–∑–¥–∞–Ω–∏–µ Smart RAG workflows –≤ n8n..." -ForegroundColor Yellow

$workflows = @(
    @{name="rag-insert.json"; description="Smart RAG Insert Workflow"},
    @{name="rag-query.json"; description="Smart RAG Query Workflow"},
    @{name="rag-analyze.json"; description="Smart RAG Analyze Workflow"}
)

$headers = @{
    "Authorization" = "Bearer $env:N8N_API_KEY"
    "Content-Type" = "application/json"
}

foreach ($workflow in $workflows) {
    $workflowFile = $workflow.name
    $description = $workflow.description
    
    Write-Host "üìù –°–æ–∑–¥–∞–Ω–∏–µ workflow: $description" -ForegroundColor Cyan
    
    try {
        if (Test-Path $workflowFile) {
            $workflowContent = Get-Content -Path $workflowFile -Raw -Encoding UTF8
            $workflowJson = $workflowContent | ConvertFrom-Json
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ payload –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è workflow
            $workflowPayload = @{
                name = $workflowJson.name
                nodes = $workflowJson.nodes
                connections = $workflowJson.connections
                settings = $workflowJson.settings
                active = $false  # –°–Ω–∞—á–∞–ª–∞ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            } | ConvertTo-Json -Depth 10
            
            # –°–æ–∑–¥–∞–Ω–∏–µ workflow
            $createResponse = Invoke-WebRequest -Uri "http://localhost:8080/api/v1/workflows" -Method POST -Headers $headers -Body $workflowPayload -ErrorAction Stop
            $createdWorkflow = $createResponse.Content | ConvertFrom-Json
            
            Write-Host "‚úÖ Workflow —Å–æ–∑–¥–∞–Ω: $($createdWorkflow.id)" -ForegroundColor Green
            
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è workflow
            $activatePayload = @{
                active = $true
            } | ConvertTo-Json
            
            $activateResponse = Invoke-WebRequest -Uri "http://localhost:8080/api/v1/workflows/$($createdWorkflow.id)" -Method PATCH -Headers $headers -Body $activatePayload -ErrorAction Stop
            
            Write-Host "‚úÖ Workflow –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: $($createdWorkflow.id)" -ForegroundColor Green
            
        } else {
            Write-Host "‚ùå –§–∞–π–ª $workflowFile –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ workflow $workflowFile : $_" -ForegroundColor Red
        Write-Host "–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $($_.Exception.Response)" -ForegroundColor Gray
    }
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Smart RAG —Å–∏—Å—Ç–µ–º—ã
Write-Host "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Smart RAG —Å–∏—Å—Ç–µ–º—ã..." -ForegroundColor Yellow

try {
    # –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –∑–Ω–∞–Ω–∏—è
    Write-Host "üìù –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –∑–Ω–∞–Ω–∏—è..." -ForegroundColor Cyan
    
    $testInsertPayload = @{
        text = "Smart RAG —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ. –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."
        metadata = @{
            source = "deployment_test"
            category = "system"
            author = "deployment_script"
        }
    } | ConvertTo-Json
    
    $insertResponse = Invoke-WebRequest -Uri "http://localhost:8080/webhook/rag-insert" -Method POST -Headers @{"Content-Type" = "application/json"} -Body $testInsertPayload -ErrorAction Stop
    $insertResult = $insertResponse.Content | ConvertFrom-Json
    
    Write-Host "‚úÖ –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: $($insertResult.knowledge_id)" -ForegroundColor Green
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
    Write-Host "üîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∑–Ω–∞–Ω–∏–π..." -ForegroundColor Cyan
    
    $testQueryPayload = @{
        query = "Smart RAG —Å–∏—Å—Ç–µ–º–∞"
        options = @{
            limit = 5
        }
    } | ConvertTo-Json
    
    $queryResponse = Invoke-WebRequest -Uri "http://localhost:8080/webhook/rag-query" -Method POST -Headers @{"Content-Type" = "application/json"} -Body $testQueryPayload -ErrorAction Stop
    $queryResult = $queryResponse.Content | ConvertFrom-Json
    
    Write-Host "‚úÖ –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: –Ω–∞–π–¥–µ–Ω–æ $($queryResult.total_found) —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤" -ForegroundColor Green
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
    if ($insertResult.knowledge_id) {
        Write-Host "üî¨ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–Ω–∏–π..." -ForegroundColor Cyan
        
        $testAnalyzePayload = @{
            knowledge_id = $insertResult.knowledge_id
            analysis_type = "comprehensive"
        } | ConvertTo-Json
        
        $analyzeResponse = Invoke-WebRequest -Uri "http://localhost:8080/webhook/rag-analyze" -Method POST -Headers @{"Content-Type" = "application/json"} -Body $testAnalyzePayload -ErrorAction Stop
        $analyzeResult = $analyzeResponse.Content | ConvertFrom-Json
        
        Write-Host "‚úÖ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ" -ForegroundColor Green
    }
    
} catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: $_" -ForegroundColor Red
    Write-Host "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ workflows –∞–∫—Ç–∏–≤–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã." -ForegroundColor Yellow
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
Write-Host "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..." -ForegroundColor Yellow

$config = @{
    smart_rag = @{
        version = "1.0.0"
        deployed_at = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
        workflows = @{
            insert = "http://localhost:8080/webhook/rag-insert"
            query = "http://localhost:8080/webhook/rag-query"
            analyze = "http://localhost:8080/webhook/rag-analyze"
        }
        database = @{
            table = "knowledge_base"
            url = "http://localhost:5432/rest/v1/knowledge_base"
        }
        ollama = @{
            url = "http://localhost:11434"
            models = @("qwen2.5-coder:1.5b", "qwen2.5-coder:7b")
        }
    }
} | ConvertTo-Json -Depth 10

$config | Out-File -FilePath "smart-rag-config.json" -Encoding UTF8

Write-Host "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ smart-rag-config.json" -ForegroundColor Green

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
Write-Host "`nüéâ Smart RAG —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞!" -ForegroundColor Green
Write-Host "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ Workflows —Å–æ–∑–¥–∞–Ω—ã: $($workflows.Count)" -ForegroundColor White
Write-Host "  ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: Supabase" -ForegroundColor White
Write-Host "  ‚Ä¢ AI –º–æ–¥–µ–ª–∏: Ollama (qwen2.5-coder)" -ForegroundColor White
Write-Host "  ‚Ä¢ Webhook endpoints –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã" -ForegroundColor White

Write-Host "`nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ n8n UI: http://localhost:8080" -ForegroundColor White
Write-Host "  ‚Ä¢ Supabase UI: http://localhost:54322" -ForegroundColor White
Write-Host "  ‚Ä¢ Ollama API: http://localhost:11434" -ForegroundColor White

Write-Host "`nüìö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ –í—Å—Ç–∞–≤–∫–∞ –∑–Ω–∞–Ω–∏–π: POST http://localhost:8080/webhook/rag-insert" -ForegroundColor White
Write-Host "  ‚Ä¢ –ü–æ–∏—Å–∫ –∑–Ω–∞–Ω–∏–π: POST http://localhost:8080/webhook/rag-query" -ForegroundColor White
Write-Host "  ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞–Ω–∏–π: POST http://localhost:8080/webhook/rag-analyze" -ForegroundColor White

Write-Host "`nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:" -ForegroundColor Cyan
Write-Host "  python smart-rag-coordinator.py" -ForegroundColor White

Write-Host "`n‚ú® Smart RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!" -ForegroundColor Green
