#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ RAG —Å–∏—Å—Ç–µ–º—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º n8n workflow'–æ–≤
"""

import asyncio
import subprocess
import sys
import os
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))

from cli.services.n8n_workflow_manager import N8nWorkflowManager, create_rag_workflows
from cli.utils.output import OutputFormatter


class RAGSystemManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self):
        self.output = OutputFormatter()
        self.project_path = Path.cwd()
        self.docker_compose_file = "docker-compose-rag.yml"

    async def start_docker_services(self):
        """–ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.output.print_header("üê≥ –ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ docker-compose —Ñ–∞–π–ª–∞
            if not Path(self.docker_compose_file).exists():
                self.output.print_error(f"‚ùå –§–∞–π–ª {self.docker_compose_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            self.output.print_info("–ó–∞–ø—É—Å–∫ Docker Compose...")
            result = subprocess.run(
                ["docker-compose", "-f", self.docker_compose_file, "up", "-d"],
                capture_output=True,
                text=True,
            )

            if result.returncode == 0:
                self.output.print_success("‚úÖ Docker —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                self.output.print_error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker: {result.stderr}")
                return False

        except Exception as e:
            self.output.print_error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False

    async def wait_for_services(self, timeout=300):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.output.print_header("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤")

        services_to_check = [
            ("RAG Proxy", "http://localhost:9000/health"),
            ("n8n", "http://localhost:5678/healthz"),
            ("LightRAG", "http://localhost:8000/health"),
        ]

        for service_name, health_url in services_to_check:
            self.output.print_info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {service_name}...")

            if await self._wait_for_service(health_url, timeout=60):
                self.output.print_success(f"‚úÖ {service_name} –≥–æ—Ç–æ–≤")
            else:
                self.output.print_warning(f"‚ö†Ô∏è {service_name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º)")

    async def _wait_for_service(self, url, timeout=60):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        import httpx

        start_time = time.time()
        while time.time() - start_time < timeout:
            try:
                async with httpx.AsyncClient() as client:
                    response = await client.get(url, timeout=5.0)
                    if response.status_code == 200:
                        return True
            except:
                pass

            await asyncio.sleep(5)

        return False

    async def create_n8n_workflows(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ n8n workflow'–æ–≤"""
        self.output.print_header("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ n8n workflow'–æ–≤")

        try:
            n8n_config = {
                "url": "http://localhost:5678",
                "username": "admin",
                "password": "admin123",
            }

            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ n8n
            self.output.print_info("–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ n8n...")
            if not await self._wait_for_service(
                n8n_config["url"] + "/healthz", timeout=120
            ):
                self.output.print_error(
                    "‚ùå n8n –Ω–µ –≥–æ—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ workflow'–æ–≤"
                )
                return False

            # –°–æ–∑–¥–∞–µ–º workflow'—ã
            success = await create_rag_workflows(str(self.project_path), n8n_config)

            if success:
                self.output.print_success("‚úÖ n8n workflow'—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                self.output.print_error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å n8n workflow'—ã")
                return False

        except Exception as e:
            self.output.print_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è workflow'–æ–≤: {e}")
            return False

    async def test_system_integration(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        self.output.print_header("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã")

        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG –∫–æ–º–∞–Ω–¥—ã
            test_commands = [
                ["python", "memory-bank-cli.py", "rag", "status"],
                ["python", "memory-bank-cli.py", "rag", "list-workflows"],
            ]

            for cmd in test_commands:
                self.output.print_info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {' '.join(cmd)}")

                result = subprocess.run(
                    cmd, capture_output=True, text=True, cwd=self.project_path
                )

                if result.returncode == 0:
                    self.output.print_success(f"‚úÖ {' '.join(cmd)} - —É—Å–ø–µ—à–Ω–æ")
                else:
                    self.output.print_warning(
                        f"‚ö†Ô∏è {' '.join(cmd)} - –æ—à–∏–±–∫–∞: {result.stderr}"
                    )

            return True

        except Exception as e:
            self.output.print_error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False

    async def show_system_status(self):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        self.output.print_header("üìä –°—Ç–∞—Ç—É—Å RAG —Å–∏—Å—Ç–µ–º—ã")

        self.output.print_info("üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
        self.output.print_info("  ‚Ä¢ RAG Proxy API: http://localhost:9000")
        self.output.print_info("  ‚Ä¢ n8n UI: http://localhost:5678")
        self.output.print_info("  ‚Ä¢ LightRAG API: http://localhost:8000")
        self.output.print_info("  ‚Ä¢ PostgreSQL: localhost:5432")

        self.output.print_info("\nüîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        self.output.print_info("  ‚Ä¢ python memory-bank-cli.py rag status")
        self.output.print_info("  ‚Ä¢ python memory-bank-cli.py rag setup-workflows")
        self.output.print_info("  ‚Ä¢ python memory-bank-cli.py rag list-workflows")
        self.output.print_info(
            "  ‚Ä¢ python memory-bank-cli.py rag suggest --code 'const user = '"
        )

        self.output.print_info("\nüìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
        self.output.print_info("  ‚Ä¢ RAG_INTEGRATION.md - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Spec Kit")
        self.output.print_info("  ‚Ä¢ RAG_INTEGRATION_REPORT.md - –æ—Ç—á–µ—Ç –æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")

    async def run_full_setup(self):
        """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ RAG —Å–∏—Å—Ç–µ–º—ã"""
        self.output.print_header("üöÄ –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ RAG —Å–∏—Å—Ç–µ–º—ã")

        try:
            # 1. –ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤
            if not await self.start_docker_services():
                return False

            # 2. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
            await self.wait_for_services()

            # 3. –°–æ–∑–¥–∞–Ω–∏–µ n8n workflow'–æ–≤
            await self.create_n8n_workflows()

            # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            await self.test_system_integration()

            # 5. –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞
            await self.show_system_status()

            self.output.print_success("üéâ RAG —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
            return True

        except Exception as e:
            self.output.print_error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    manager = RAGSystemManager()

    print("ü§ñ RAG-Powered Code Assistant: Vibecode Spec Kit Integration")
    print("=" * 70)

    success = await manager.run_full_setup()

    if success:
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("üí° –û—Ç–∫—Ä–æ–π—Ç–µ VS Code –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
